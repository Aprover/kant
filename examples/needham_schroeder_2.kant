principal Alice, Bob

Alice know {
    const priv_key_a: PrivateKey; 
    fresh nonce_a: Nonce; 
    pub_key_a = PUB_GEN(priv_key_a);
}

Bob know {
    const priv_key_b: PrivateKey;
    fresh nonce_b: Nonce;
    pub_key_b = PUB_GEN(priv_key_b);
}

Alice -> Bob : pub_key_a
Bob -> Alice : pub_key_b

Alice know {
    encrypted_nonce_a = PKE_ENC(nonce_a) with pub_key_b;
}

Alice -> Bob : encrypted_nonce_a

Bob know {
    decrypted_nonce_a = PKE_DEC(encrypted_nonce_a) with priv_key_b;
    nonce_b_concat_nonce_a = CONCAT(nonce_b, decrypted_nonce_a);
    encrypted_nonce_b_concat_nonce_a = PKE_ENC(nonce_b_concat_nonce_a) with pub_key_a;
}

Bob -> Alice : encrypted_nonce_b_concat_nonce_a

Alice know {
    decrypted_nonce_b_concat_nonce_a = PKE_DEC(encrypted_nonce_b_concat_nonce_a) with priv_key_a;
    splitted_nonce_b_concat_nonce_a = SPLIT(decrypted_nonce_b_concat_nonce_a);
    decrypted_nb = splitted_nonce_b_concat_nonce_a[0];
    decrypted_na = splitted_nonce_b_concat_nonce_a[1];
}

check nonce_a, decrypted_na should be equal

Alice know {
    encrypted_nb = PKE_ENC(decrypted_nb) with pub_key_b;
}

Alice -> Bob : encrypted_nb

Bob know {
    decrypted_nonce_b = PKE_DEC(encrypted_nb) with priv_key_b;
}

check nonce_b, decrypted_nonce_b should be equal

check Bob should authenticate Alice with decrypted_nonce_b
check Alice should authenticate Bob with decrypted_na
check only Alice, Bob should know nonce_a
check only Alice, Bob should know nonce_b