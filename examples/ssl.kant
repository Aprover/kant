principal Client, Server

Server know {
    const server_private_key,
    const server_certificate,
    server_public_key = PUB_GEN(server_private_key),
    fresh server_random
}

Client know {
    const client_private_key,
    client_public_key = PUB_GEN(client_private_key),
    fresh client_random
}

(client_hello) Client -> Server : [ client_public_key, client_random ] // client sends "Client Hello" with its public key and a random number

(server_hello) Server -> Client : [ server_public_key, server_certificate, server_random ] // server sends "Server Hello" with its certificate, its public key and a random number

Client know {
    // verify server's certificate
    valid = SIGNVERIF(server_certificate) with { k=server_public_key, message=server_random },
    // generate pre-master secret
    params = [ client_public_key, server_public_key, client_random, server_random ],
    pre_master_secret = HASH(CONCAT(...params)),
    // encrypt pre-master secret with server's public key
    encrypted_pms = PKE_ENC(pre_master_secret) with server_public_key
}

Client -> Server : encrypted_pms

Server know {
    // decrypt pre-master secret with server's private key
    decrypted_pms = PKE_DEC(encrypted_pms) with server_private_key,
    // generate master secret
    server_master_secret = PRF(server_public_key, pre_master_secret, CONCAT(server_random, client_random))
}

Client know {
    // generate master secret
    client_master_secret = PRF(client_public_key, pre_master_secret, CONCAT(client_random, server_random))
}

check server_master_secret, client_master_secret should be equal

// the master_secret will be used in the derivation of the session keys