import type {
    DeepPartial,
    DefaultSharedModuleContext,
    LangiumServices,
    LangiumSharedServices,
    Module,
    PartialLangiumServices
} from "langium"
import { createDefaultModule, createDefaultSharedModule, inject } from "langium"
import { KantGeneratedModule, KantGeneratedSharedModule } from "./generated/module"
import { KantScopeComputation } from "./scope-computation"
import { KantScopeProvider } from "./scope-provider"
import { KantValidator, registerValidationChecks } from "./validator"
import { KantWorkspaceManager } from "./workspace-manager"

/**
 * Declaration of custom services - add your own service classes here.
 */
export type KantAddedServices = {
    validation: {
        KantValidator: KantValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type KantServices = LangiumServices & KantAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */

export const KantModule: Module<KantServices, PartialLangiumServices & KantAddedServices> = {
    validation: {
        KantValidator: () => KantValidator
    },
    references: {
        ScopeComputation: services => new KantScopeComputation(services),
        ScopeProvider: services => new KantScopeProvider(services)
    }
}

/**
 * Declaration of custom shared services - add your own service classes here.
 */
export type KantAddedSharedServices = Record<string, never>

/**
 * Union of Langium default shared services and your custom shared services - use this as constructor parameter
 * of custom service classes.
 */
export type KantSharedServices = LangiumSharedServices & KantAddedSharedServices

export const KantSharedModule: Module<KantSharedServices, DeepPartial<LangiumSharedServices>> = {
    workspace: {
        WorkspaceManager: services => new KantWorkspaceManager(services)
    }
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createKantServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices
    Kant: KantServices
} {
    const shared = inject(createDefaultSharedModule(context), KantGeneratedSharedModule, KantSharedModule)
    const Kant = inject(createDefaultModule({ shared }), KantGeneratedModule, KantModule)
    shared.ServiceRegistry.register(Kant)
    registerValidationChecks(Kant)
    return { shared, Kant }
}
