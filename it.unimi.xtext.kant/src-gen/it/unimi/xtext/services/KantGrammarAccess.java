/*
 * generated by Xtext 2.29.0
 */
package it.unimi.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KantGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.Protocol");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Protocol:
		//    elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKnowledgeBaseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrincipalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCommunicationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cScenarioBranchingParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCheckParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Element:
		//    FunctionDef | PropertyDef | KnowledgeBase | Principal | Communication | ScenarioBranching | Check;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionDef | PropertyDef | KnowledgeBase | Principal | Communication | ScenarioBranching | Check
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionDef
		public RuleCall getFunctionDefParserRuleCall_0() { return cFunctionDefParserRuleCall_0; }
		
		//PropertyDef
		public RuleCall getPropertyDefParserRuleCall_1() { return cPropertyDefParserRuleCall_1; }
		
		//KnowledgeBase
		public RuleCall getKnowledgeBaseParserRuleCall_2() { return cKnowledgeBaseParserRuleCall_2; }
		
		//Principal
		public RuleCall getPrincipalParserRuleCall_3() { return cPrincipalParserRuleCall_3; }
		
		//Communication
		public RuleCall getCommunicationParserRuleCall_4() { return cCommunicationParserRuleCall_4; }
		
		//ScenarioBranching
		public RuleCall getScenarioBranchingParserRuleCall_5() { return cScenarioBranchingParserRuleCall_5; }
		
		//Check
		public RuleCall getCheckParserRuleCall_6() { return cCheckParserRuleCall_6; }
	}
	public class UniversalIntroductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.UniversalIntroduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UniversalIntroduction:
		//    ('forall' args+=ID (',' args+=ID)* ':')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('forall' args+=ID (',' args+=ID)* ':')
		public Group getGroup() { return cGroup; }
		
		//'forall'
		public Keyword getForallKeyword_0() { return cForallKeyword_0; }
		
		//args+=ID
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//ID
		public RuleCall getArgsIDTerminalRuleCall_1_0() { return cArgsIDTerminalRuleCall_1_0; }
		
		//(',' args+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//args+=ID
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }
		
		//ID
		public RuleCall getArgsIDTerminalRuleCall_2_1_0() { return cArgsIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
	}
	public class FunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIntroAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntroUniversalIntroductionParserRuleCall_1_0 = (RuleCall)cIntroAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsFunctionParamParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParamsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParamsFunctionParamParserRuleCall_3_2_1_0 = (RuleCall)cParamsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeyFunctionKeyParserRuleCall_4_1_0 = (RuleCall)cKeyAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnFunctionReturnParserRuleCall_5_1_0 = (RuleCall)cReturnAssignment_5_1.eContents().get(0);
		private final Assignment cRandomizedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cRandomizedRandomizedKeyword_6_0 = (Keyword)cRandomizedAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOwAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cOwOneKeyword_7_0_0 = (Keyword)cOwAssignment_7_0.eContents().get(0);
		private final Keyword cWayKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		
		//FunctionDef:
		//    'function'
		//    (intro=UniversalIntroduction)?
		//    name+=ID
		//    ('(' params+=FunctionParam (',' params+=FunctionParam)* ')')?
		//    ( 'with' key=FunctionKey)?
		//    (
		//        '->' return=FunctionReturn
		//    )?
		//    (randomized?='randomized')?
		//    (ow?='one' 'way')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function'
		//(intro=UniversalIntroduction)?
		//name+=ID
		//('(' params+=FunctionParam (',' params+=FunctionParam)* ')')?
		//( 'with' key=FunctionKey)?
		//(
		//    '->' return=FunctionReturn
		//)?
		//(randomized?='randomized')?
		//(ow?='one' 'way')?
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//(intro=UniversalIntroduction)?
		public Assignment getIntroAssignment_1() { return cIntroAssignment_1; }
		
		//UniversalIntroduction
		public RuleCall getIntroUniversalIntroductionParserRuleCall_1_0() { return cIntroUniversalIntroductionParserRuleCall_1_0; }
		
		//name+=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' params+=FunctionParam (',' params+=FunctionParam)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//params+=FunctionParam
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }
		
		//FunctionParam
		public RuleCall getParamsFunctionParamParserRuleCall_3_1_0() { return cParamsFunctionParamParserRuleCall_3_1_0; }
		
		//(',' params+=FunctionParam)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//params+=FunctionParam
		public Assignment getParamsAssignment_3_2_1() { return cParamsAssignment_3_2_1; }
		
		//FunctionParam
		public RuleCall getParamsFunctionParamParserRuleCall_3_2_1_0() { return cParamsFunctionParamParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//( 'with' key=FunctionKey)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//key=FunctionKey
		public Assignment getKeyAssignment_4_1() { return cKeyAssignment_4_1; }
		
		//FunctionKey
		public RuleCall getKeyFunctionKeyParserRuleCall_4_1_0() { return cKeyFunctionKeyParserRuleCall_4_1_0; }
		
		//(
		//    '->' return=FunctionReturn
		//)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }
		
		//return=FunctionReturn
		public Assignment getReturnAssignment_5_1() { return cReturnAssignment_5_1; }
		
		//FunctionReturn
		public RuleCall getReturnFunctionReturnParserRuleCall_5_1_0() { return cReturnFunctionReturnParserRuleCall_5_1_0; }
		
		//(randomized?='randomized')?
		public Assignment getRandomizedAssignment_6() { return cRandomizedAssignment_6; }
		
		//'randomized'
		public Keyword getRandomizedRandomizedKeyword_6_0() { return cRandomizedRandomizedKeyword_6_0; }
		
		//(ow?='one' 'way')?
		public Group getGroup_7() { return cGroup_7; }
		
		//ow?='one'
		public Assignment getOwAssignment_7_0() { return cOwAssignment_7_0; }
		
		//'one'
		public Keyword getOwOneKeyword_7_0_0() { return cOwOneKeyword_7_0_0; }
		
		//'way'
		public Keyword getWayKeyword_7_1() { return cWayKeyword_7_1; }
	}
	public class FunctionParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FunctionParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariadicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cVariadicFullStopFullStopFullStopKeyword_0_0 = (Keyword)cVariadicAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptQuestionMarkKeyword_2_0 = (Keyword)cOptAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeKnowledgeValueParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		
		//FunctionParam:
		//    (variadic?='...')? name=ID (opt?='?')? ('=' type=KnowledgeValue)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(variadic?='...')? name=ID (opt?='?')? ('=' type=KnowledgeValue)?
		public Group getGroup() { return cGroup; }
		
		//(variadic?='...')?
		public Assignment getVariadicAssignment_0() { return cVariadicAssignment_0; }
		
		//'...'
		public Keyword getVariadicFullStopFullStopFullStopKeyword_0_0() { return cVariadicFullStopFullStopFullStopKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(opt?='?')?
		public Assignment getOptAssignment_2() { return cOptAssignment_2; }
		
		//'?'
		public Keyword getOptQuestionMarkKeyword_2_0() { return cOptQuestionMarkKeyword_2_0; }
		
		//('=' type=KnowledgeValue)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//type=KnowledgeValue
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//KnowledgeValue
		public RuleCall getTypeKnowledgeValueParserRuleCall_3_1_0() { return cTypeKnowledgeValueParserRuleCall_3_1_0; }
	}
	public class FunctionKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FunctionKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementsFunctionKeyElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsFunctionKeyElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cElementsFunctionKeyElementParserRuleCall_1_2_1_0 = (RuleCall)cElementsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//FunctionKey:
		//    elements+=FunctionKeyElement
		//    | '{' elements+=FunctionKeyElement (',' elements+=FunctionKeyElement)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=FunctionKeyElement
		//| '{' elements+=FunctionKeyElement (',' elements+=FunctionKeyElement)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elements+=FunctionKeyElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//FunctionKeyElement
		public RuleCall getElementsFunctionKeyElementParserRuleCall_0_0() { return cElementsFunctionKeyElementParserRuleCall_0_0; }
		
		//'{' elements+=FunctionKeyElement (',' elements+=FunctionKeyElement)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//elements+=FunctionKeyElement
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//FunctionKeyElement
		public RuleCall getElementsFunctionKeyElementParserRuleCall_1_1_0() { return cElementsFunctionKeyElementParserRuleCall_1_1_0; }
		
		//(',' elements+=FunctionKeyElement)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//elements+=FunctionKeyElement
		public Assignment getElementsAssignment_1_2_1() { return cElementsAssignment_1_2_1; }
		
		//FunctionKeyElement
		public RuleCall getElementsFunctionKeyElementParserRuleCall_1_2_1_0() { return cElementsFunctionKeyElementParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class FunctionKeyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FunctionKeyElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeKnowledgeValueParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//FunctionKeyElement:
		//    name+=ID ('=' type=KnowledgeValue)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=ID ('=' type=KnowledgeValue)?
		public Group getGroup() { return cGroup; }
		
		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' type=KnowledgeValue)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//type=KnowledgeValue
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//KnowledgeValue
		public RuleCall getTypeKnowledgeValueParserRuleCall_1_1_0() { return cTypeKnowledgeValueParserRuleCall_1_1_0; }
	}
	public class FunctionReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FunctionReturn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementsFunctionReturnElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsFunctionReturnElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cElementsFunctionReturnElementParserRuleCall_1_2_1_0 = (RuleCall)cElementsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//FunctionReturn:
		//    elements+=FunctionReturnElement
		//    | '{' elements+=FunctionReturnElement (',' elements+=FunctionReturnElement)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=FunctionReturnElement
		//| '{' elements+=FunctionReturnElement (',' elements+=FunctionReturnElement)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elements+=FunctionReturnElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//FunctionReturnElement
		public RuleCall getElementsFunctionReturnElementParserRuleCall_0_0() { return cElementsFunctionReturnElementParserRuleCall_0_0; }
		
		//'{' elements+=FunctionReturnElement (',' elements+=FunctionReturnElement)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//elements+=FunctionReturnElement
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//FunctionReturnElement
		public RuleCall getElementsFunctionReturnElementParserRuleCall_1_1_0() { return cElementsFunctionReturnElementParserRuleCall_1_1_0; }
		
		//(',' elements+=FunctionReturnElement)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//elements+=FunctionReturnElement
		public Assignment getElementsAssignment_1_2_1() { return cElementsAssignment_1_2_1; }
		
		//FunctionReturnElement
		public RuleCall getElementsFunctionReturnElementParserRuleCall_1_2_1_0() { return cElementsFunctionReturnElementParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class FunctionReturnElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FunctionReturnElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeKnowledgeValueParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//FunctionReturnElement:
		//    name+=ID ('=' type=KnowledgeValue)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=ID ('=' type=KnowledgeValue)?
		public Group getGroup() { return cGroup; }
		
		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' type=KnowledgeValue)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//type=KnowledgeValue
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//KnowledgeValue
		public RuleCall getTypeKnowledgeValueParserRuleCall_1_1_0() { return cTypeKnowledgeValueParserRuleCall_1_1_0; }
	}
	public class PropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.PropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPropertyAlternatives_1_0 = (Alternatives)cPropertyAssignment_1.eContents().get(0);
		private final RuleCall cPropertyKnowledgeEqualityDefParserRuleCall_1_0_0 = (RuleCall)cPropertyAlternatives_1_0.eContents().get(0);
		private final RuleCall cPropertyFunctionInversionDefParserRuleCall_1_0_1 = (RuleCall)cPropertyAlternatives_1_0.eContents().get(1);
		
		//PropertyDef:
		//    'property' property=(KnowledgeEqualityDef | FunctionInversionDef)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' property=(KnowledgeEqualityDef | FunctionInversionDef)
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//property=(KnowledgeEqualityDef | FunctionInversionDef)
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//(KnowledgeEqualityDef | FunctionInversionDef)
		public Alternatives getPropertyAlternatives_1_0() { return cPropertyAlternatives_1_0; }
		
		//KnowledgeEqualityDef
		public RuleCall getPropertyKnowledgeEqualityDefParserRuleCall_1_0_0() { return cPropertyKnowledgeEqualityDefParserRuleCall_1_0_0; }
		
		//FunctionInversionDef
		public RuleCall getPropertyFunctionInversionDefParserRuleCall_1_0_1() { return cPropertyFunctionInversionDefParserRuleCall_1_0_1; }
	}
	public class KnowledgeEqualityDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeEqualityDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntroAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntroUniversalIntroductionParserRuleCall_0_0 = (RuleCall)cIntroAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueKnowledgeValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cEqualsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetKnowledgeValueParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		
		//KnowledgeEqualityDef:
		//    (intro=UniversalIntroduction)?
		//    value=KnowledgeValue 'equals' target=KnowledgeValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(intro=UniversalIntroduction)?
		//value=KnowledgeValue 'equals' target=KnowledgeValue
		public Group getGroup() { return cGroup; }
		
		//(intro=UniversalIntroduction)?
		public Assignment getIntroAssignment_0() { return cIntroAssignment_0; }
		
		//UniversalIntroduction
		public RuleCall getIntroUniversalIntroductionParserRuleCall_0_0() { return cIntroUniversalIntroductionParserRuleCall_0_0; }
		
		//value=KnowledgeValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//KnowledgeValue
		public RuleCall getValueKnowledgeValueParserRuleCall_1_0() { return cValueKnowledgeValueParserRuleCall_1_0; }
		
		//'equals'
		public Keyword getEqualsKeyword_2() { return cEqualsKeyword_2; }
		
		//target=KnowledgeValue
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//KnowledgeValue
		public RuleCall getTargetKnowledgeValueParserRuleCall_3_0() { return cTargetKnowledgeValueParserRuleCall_3_0; }
	}
	public class FunctionInversionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FunctionInversionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInverterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInverterIDTerminalRuleCall_0_0 = (RuleCall)cInverterAssignment_0.eContents().get(0);
		private final Keyword cInvertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionIDTerminalRuleCall_2_0 = (RuleCall)cFunctionAssignment_2.eContents().get(0);
		
		//FunctionInversionDef:
		//    inverter=ID 'invert' function=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//inverter=ID 'invert' function=ID
		public Group getGroup() { return cGroup; }
		
		//inverter=ID
		public Assignment getInverterAssignment_0() { return cInverterAssignment_0; }
		
		//ID
		public RuleCall getInverterIDTerminalRuleCall_0_0() { return cInverterIDTerminalRuleCall_0_0; }
		
		//'invert'
		public Keyword getInvertKeyword_1() { return cInvertKeyword_1; }
		
		//function=ID
		public Assignment getFunctionAssignment_2() { return cFunctionAssignment_2; }
		
		//ID
		public RuleCall getFunctionIDTerminalRuleCall_2_0() { return cFunctionIDTerminalRuleCall_2_0; }
	}
	public class KnowledgeBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSharedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSharedSharedKeyword_0_0 = (Keyword)cSharedAssignment_0.eContents().get(0);
		private final Keyword cKnowledgeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKnowledgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKnowledgeKnowledgeParserRuleCall_2_0 = (RuleCall)cKnowledgeAssignment_2.eContents().get(0);
		
		//KnowledgeBase:
		//    (shared?='shared')? 'knowledge' knowledge=Knowledge;
		@Override public ParserRule getRule() { return rule; }
		
		//(shared?='shared')? 'knowledge' knowledge=Knowledge
		public Group getGroup() { return cGroup; }
		
		//(shared?='shared')?
		public Assignment getSharedAssignment_0() { return cSharedAssignment_0; }
		
		//'shared'
		public Keyword getSharedSharedKeyword_0_0() { return cSharedSharedKeyword_0_0; }
		
		//'knowledge'
		public Keyword getKnowledgeKeyword_1() { return cKnowledgeKeyword_1; }
		
		//knowledge=Knowledge
		public Assignment getKnowledgeAssignment_2() { return cKnowledgeAssignment_2; }
		
		//Knowledge
		public RuleCall getKnowledgeKnowledgeParserRuleCall_2_0() { return cKnowledgeKnowledgeParserRuleCall_2_0; }
	}
	public class PrincipalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.Principal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrincipalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKnowKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKnowledgeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKnowledgeKnowledgeParserRuleCall_3_1_0 = (RuleCall)cKnowledgeAssignment_3_1.eContents().get(0);
		
		//Principal:
		//    'principal' name+=ID (',' name+=ID)* ('know' knowledge=Knowledge)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'principal' name+=ID (',' name+=ID)* ('know' knowledge=Knowledge)?
		public Group getGroup() { return cGroup; }
		
		//'principal'
		public Keyword getPrincipalKeyword_0() { return cPrincipalKeyword_0; }
		
		//name+=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(',' name+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//name+=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//('know' knowledge=Knowledge)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'know'
		public Keyword getKnowKeyword_3_0() { return cKnowKeyword_3_0; }
		
		//knowledge=Knowledge
		public Assignment getKnowledgeAssignment_3_1() { return cKnowledgeAssignment_3_1; }
		
		//Knowledge
		public RuleCall getKnowledgeKnowledgeParserRuleCall_3_1_0() { return cKnowledgeKnowledgeParserRuleCall_3_1_0; }
	}
	public class KnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.Knowledge");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKnowledgeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKnowledgeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Knowledge:
		//    KnowledgeDef | KnowledgeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//KnowledgeDef | KnowledgeValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KnowledgeDef
		public RuleCall getKnowledgeDefParserRuleCall_0() { return cKnowledgeDefParserRuleCall_0; }
		
		//KnowledgeValue
		public RuleCall getKnowledgeValueParserRuleCall_1() { return cKnowledgeValueParserRuleCall_1; }
	}
	public class KnowledgeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final RuleCall cKnowledgeDefDestructuringParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueKnowledgeValueParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cConstKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cFreshKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0_0 = (RuleCall)cNameAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_2_1_0 = (RuleCall)cNameAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		
		//KnowledgeDef:
		//    (name+=ID | KnowledgeDefDestructuring) '=' value=KnowledgeValue
		//    | ('const' | 'fresh') (name+=ID | '{' name+=ID (',' name+=ID)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//(name+=ID | KnowledgeDefDestructuring) '=' value=KnowledgeValue
		//| ('const' | 'fresh') (name+=ID | '{' name+=ID (',' name+=ID)* '}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(name+=ID | KnowledgeDefDestructuring) '=' value=KnowledgeValue
		public Group getGroup_0() { return cGroup_0; }
		
		//(name+=ID | KnowledgeDefDestructuring)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//name+=ID
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0_0() { return cNameIDTerminalRuleCall_0_0_0_0; }
		
		//KnowledgeDefDestructuring
		public RuleCall getKnowledgeDefDestructuringParserRuleCall_0_0_1() { return cKnowledgeDefDestructuringParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//value=KnowledgeValue
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//KnowledgeValue
		public RuleCall getValueKnowledgeValueParserRuleCall_0_2_0() { return cValueKnowledgeValueParserRuleCall_0_2_0; }
		
		//('const' | 'fresh') (name+=ID | '{' name+=ID (',' name+=ID)* '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//('const' | 'fresh')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'const'
		public Keyword getConstKeyword_1_0_0() { return cConstKeyword_1_0_0; }
		
		//'fresh'
		public Keyword getFreshKeyword_1_0_1() { return cFreshKeyword_1_0_1; }
		
		//(name+=ID | '{' name+=ID (',' name+=ID)* '}')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//name+=ID
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0_0() { return cNameIDTerminalRuleCall_1_1_0_0; }
		
		//'{' name+=ID (',' name+=ID)* '}'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_1_0() { return cLeftCurlyBracketKeyword_1_1_1_0; }
		
		//name+=ID
		public Assignment getNameAssignment_1_1_1_1() { return cNameAssignment_1_1_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_1_0; }
		
		//(',' name+=ID)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }
		
		//name+=ID
		public Assignment getNameAssignment_1_1_1_2_1() { return cNameAssignment_1_1_1_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_2_1_0() { return cNameIDTerminalRuleCall_1_1_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_1_3() { return cRightCurlyBracketKeyword_1_1_1_3; }
	}
	public class KnowledgeDefDestructuringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeDefDestructuring");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKnowledgeDefSetDestructuringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKnowledgeDefListDestructuringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//KnowledgeDefDestructuring:
		//    KnowledgeDefSetDestructuring
		//    | KnowledgeDefListDestructuring
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//KnowledgeDefSetDestructuring
		//| KnowledgeDefListDestructuring
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KnowledgeDefSetDestructuring
		public RuleCall getKnowledgeDefSetDestructuringParserRuleCall_0() { return cKnowledgeDefSetDestructuringParserRuleCall_0; }
		
		//KnowledgeDefListDestructuring
		public RuleCall getKnowledgeDefListDestructuringParserRuleCall_1() { return cKnowledgeDefListDestructuringParserRuleCall_1; }
	}
	public class KnowledgeDefSetDestructuringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeDefSetDestructuring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKnowledgeDefSetDestructuringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAssignmentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAssignmentsKnowledgeDefSetDesctructuringAssignmentParserRuleCall_2_0_0 = (RuleCall)cAssignmentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAssignmentsKnowledgeDefSetDesctructuringAssignmentParserRuleCall_2_1_1_0 = (RuleCall)cAssignmentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KnowledgeDefSetDestructuring:
		//    {KnowledgeDefSetDestructuring} '{' (assignments+=KnowledgeDefSetDesctructuringAssignment (',' assignments+=KnowledgeDefSetDesctructuringAssignment)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{KnowledgeDefSetDestructuring} '{' (assignments+=KnowledgeDefSetDesctructuringAssignment (',' assignments+=KnowledgeDefSetDesctructuringAssignment)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{KnowledgeDefSetDestructuring}
		public Action getKnowledgeDefSetDestructuringAction_0() { return cKnowledgeDefSetDestructuringAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(assignments+=KnowledgeDefSetDesctructuringAssignment (',' assignments+=KnowledgeDefSetDesctructuringAssignment)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//assignments+=KnowledgeDefSetDesctructuringAssignment
		public Assignment getAssignmentsAssignment_2_0() { return cAssignmentsAssignment_2_0; }
		
		//KnowledgeDefSetDesctructuringAssignment
		public RuleCall getAssignmentsKnowledgeDefSetDesctructuringAssignmentParserRuleCall_2_0_0() { return cAssignmentsKnowledgeDefSetDesctructuringAssignmentParserRuleCall_2_0_0; }
		
		//(',' assignments+=KnowledgeDefSetDesctructuringAssignment)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//assignments+=KnowledgeDefSetDesctructuringAssignment
		public Assignment getAssignmentsAssignment_2_1_1() { return cAssignmentsAssignment_2_1_1; }
		
		//KnowledgeDefSetDesctructuringAssignment
		public RuleCall getAssignmentsKnowledgeDefSetDesctructuringAssignmentParserRuleCall_2_1_1_0() { return cAssignmentsKnowledgeDefSetDesctructuringAssignmentParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class KnowledgeDefSetDesctructuringAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeDefSetDesctructuringAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFromAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFromIDTerminalRuleCall_1_1_0 = (RuleCall)cFromAssignment_1_1.eContents().get(0);
		
		//KnowledgeDefSetDesctructuringAssignment:
		//    name=ID ('=' from=ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('=' from=ID)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' from=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//from=ID
		public Assignment getFromAssignment_1_1() { return cFromAssignment_1_1; }
		
		//ID
		public RuleCall getFromIDTerminalRuleCall_1_1_0() { return cFromIDTerminalRuleCall_1_1_0; }
	}
	public class KnowledgeDefListDestructuringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeDefListDestructuring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKnowledgeDefListDestructuringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAssignmentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAssignmentsKnowledgeDefListDesctructuringAssignmentParserRuleCall_2_0_0 = (RuleCall)cAssignmentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAssignmentsKnowledgeDefListDesctructuringAssignmentParserRuleCall_2_1_1_0 = (RuleCall)cAssignmentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KnowledgeDefListDestructuring:
		//    {KnowledgeDefListDestructuring} '[' (assignments+=KnowledgeDefListDesctructuringAssignment (',' assignments+=KnowledgeDefListDesctructuringAssignment)*)? ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{KnowledgeDefListDestructuring} '[' (assignments+=KnowledgeDefListDesctructuringAssignment (',' assignments+=KnowledgeDefListDesctructuringAssignment)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{KnowledgeDefListDestructuring}
		public Action getKnowledgeDefListDestructuringAction_0() { return cKnowledgeDefListDestructuringAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(assignments+=KnowledgeDefListDesctructuringAssignment (',' assignments+=KnowledgeDefListDesctructuringAssignment)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//assignments+=KnowledgeDefListDesctructuringAssignment
		public Assignment getAssignmentsAssignment_2_0() { return cAssignmentsAssignment_2_0; }
		
		//KnowledgeDefListDesctructuringAssignment
		public RuleCall getAssignmentsKnowledgeDefListDesctructuringAssignmentParserRuleCall_2_0_0() { return cAssignmentsKnowledgeDefListDesctructuringAssignmentParserRuleCall_2_0_0; }
		
		//(',' assignments+=KnowledgeDefListDesctructuringAssignment)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//assignments+=KnowledgeDefListDesctructuringAssignment
		public Assignment getAssignmentsAssignment_2_1_1() { return cAssignmentsAssignment_2_1_1; }
		
		//KnowledgeDefListDesctructuringAssignment
		public RuleCall getAssignmentsKnowledgeDefListDesctructuringAssignmentParserRuleCall_2_1_1_0() { return cAssignmentsKnowledgeDefListDesctructuringAssignmentParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class KnowledgeDefListDesctructuringAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeDefListDesctructuringAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cKnowledgeDefListDesctructuringAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cKnowledgeDefListDesctructuringAssignmentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword c_Keyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//KnowledgeDefListDesctructuringAssignment:
		//    {KnowledgeDefListDesctructuringAssignment} '...'
		//    | {KnowledgeDefListDesctructuringAssignment} '_'
		//    | name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{KnowledgeDefListDesctructuringAssignment} '...'
		//| {KnowledgeDefListDesctructuringAssignment} '_'
		//| name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{KnowledgeDefListDesctructuringAssignment} '...'
		public Group getGroup_0() { return cGroup_0; }
		
		//{KnowledgeDefListDesctructuringAssignment}
		public Action getKnowledgeDefListDesctructuringAssignmentAction_0_0() { return cKnowledgeDefListDesctructuringAssignmentAction_0_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_0_1() { return cFullStopFullStopFullStopKeyword_0_1; }
		
		//{KnowledgeDefListDesctructuringAssignment} '_'
		public Group getGroup_1() { return cGroup_1; }
		
		//{KnowledgeDefListDesctructuringAssignment}
		public Action getKnowledgeDefListDesctructuringAssignmentAction_1_0() { return cKnowledgeDefListDesctructuringAssignmentAction_1_0; }
		
		//'_'
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class KnowledgeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKnowledgeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKnowledgeListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKnowledgeSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKnowledgeGeneratorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cKnowledgeFromFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//KnowledgeValue:
		//    KnowledgeRef
		//    | KnowledgeList
		//    | KnowledgeSet
		//    | KnowledgeGenerator
		//    | KnowledgeFromFunction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//KnowledgeRef
		//| KnowledgeList
		//| KnowledgeSet
		//| KnowledgeGenerator
		//| KnowledgeFromFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KnowledgeRef
		public RuleCall getKnowledgeRefParserRuleCall_0() { return cKnowledgeRefParserRuleCall_0; }
		
		//KnowledgeList
		public RuleCall getKnowledgeListParserRuleCall_1() { return cKnowledgeListParserRuleCall_1; }
		
		//KnowledgeSet
		public RuleCall getKnowledgeSetParserRuleCall_2() { return cKnowledgeSetParserRuleCall_2; }
		
		//KnowledgeGenerator
		public RuleCall getKnowledgeGeneratorParserRuleCall_3() { return cKnowledgeGeneratorParserRuleCall_3; }
		
		//KnowledgeFromFunction
		public RuleCall getKnowledgeFromFunctionParserRuleCall_4() { return cKnowledgeFromFunctionParserRuleCall_4; }
	}
	public class KnowledgeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKnowledgeListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cValuesAlternatives_2_0_0 = (Alternatives)cValuesAssignment_2_0.eContents().get(0);
		private final RuleCall cValuesKnowledgeValueParserRuleCall_2_0_0_0 = (RuleCall)cValuesAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cValuesKnowledgeSpreadingParserRuleCall_2_0_0_1 = (RuleCall)cValuesAlternatives_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cValuesAlternatives_2_1_1_0 = (Alternatives)cValuesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cValuesKnowledgeValueParserRuleCall_2_1_1_0_0 = (RuleCall)cValuesAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cValuesKnowledgeSpreadingParserRuleCall_2_1_1_0_1 = (RuleCall)cValuesAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KnowledgeList:
		//    {KnowledgeList} '[' (values+=(KnowledgeValue | KnowledgeSpreading) (',' values+=(KnowledgeValue | KnowledgeSpreading))*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{KnowledgeList} '[' (values+=(KnowledgeValue | KnowledgeSpreading) (',' values+=(KnowledgeValue | KnowledgeSpreading))*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{KnowledgeList}
		public Action getKnowledgeListAction_0() { return cKnowledgeListAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=(KnowledgeValue | KnowledgeSpreading) (',' values+=(KnowledgeValue | KnowledgeSpreading))*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=(KnowledgeValue | KnowledgeSpreading)
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//(KnowledgeValue | KnowledgeSpreading)
		public Alternatives getValuesAlternatives_2_0_0() { return cValuesAlternatives_2_0_0; }
		
		//KnowledgeValue
		public RuleCall getValuesKnowledgeValueParserRuleCall_2_0_0_0() { return cValuesKnowledgeValueParserRuleCall_2_0_0_0; }
		
		//KnowledgeSpreading
		public RuleCall getValuesKnowledgeSpreadingParserRuleCall_2_0_0_1() { return cValuesKnowledgeSpreadingParserRuleCall_2_0_0_1; }
		
		//(',' values+=(KnowledgeValue | KnowledgeSpreading))*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=(KnowledgeValue | KnowledgeSpreading)
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//(KnowledgeValue | KnowledgeSpreading)
		public Alternatives getValuesAlternatives_2_1_1_0() { return cValuesAlternatives_2_1_1_0; }
		
		//KnowledgeValue
		public RuleCall getValuesKnowledgeValueParserRuleCall_2_1_1_0_0() { return cValuesKnowledgeValueParserRuleCall_2_1_1_0_0; }
		
		//KnowledgeSpreading
		public RuleCall getValuesKnowledgeSpreadingParserRuleCall_2_1_1_0_1() { return cValuesKnowledgeSpreadingParserRuleCall_2_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class KnowledgeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefIDTerminalRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAccessAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAccessIDTerminalRuleCall_1_1_0 = (RuleCall)cAccessAssignment_1_1.eContents().get(0);
		
		//KnowledgeRef:
		//    ref=ID ('.' access+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=ID ('.' access+=ID)*
		public Group getGroup() { return cGroup; }
		
		//ref=ID
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//ID
		public RuleCall getRefIDTerminalRuleCall_0_0() { return cRefIDTerminalRuleCall_0_0; }
		
		//('.' access+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//access+=ID
		public Assignment getAccessAssignment_1_1() { return cAccessAssignment_1_1; }
		
		//ID
		public RuleCall getAccessIDTerminalRuleCall_1_1_0() { return cAccessIDTerminalRuleCall_1_1_0; }
	}
	public class KnowledgeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKnowledgeSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cContentAlternatives_2_0_0 = (Alternatives)cContentAssignment_2_0.eContents().get(0);
		private final RuleCall cContentKnowledgeParserRuleCall_2_0_0_0 = (RuleCall)cContentAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cContentKnowledgeSpreadingParserRuleCall_2_0_0_1 = (RuleCall)cContentAlternatives_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cContentAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cContentAlternatives_2_1_1_0 = (Alternatives)cContentAssignment_2_1_1.eContents().get(0);
		private final RuleCall cContentKnowledgeParserRuleCall_2_1_1_0_0 = (RuleCall)cContentAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cContentKnowledgeSpreadingParserRuleCall_2_1_1_0_1 = (RuleCall)cContentAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KnowledgeSet:
		//    {KnowledgeSet} '{' (content+=(Knowledge | KnowledgeSpreading) (',' content+=(Knowledge | KnowledgeSpreading))*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{KnowledgeSet} '{' (content+=(Knowledge | KnowledgeSpreading) (',' content+=(Knowledge | KnowledgeSpreading))*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{KnowledgeSet}
		public Action getKnowledgeSetAction_0() { return cKnowledgeSetAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(content+=(Knowledge | KnowledgeSpreading) (',' content+=(Knowledge | KnowledgeSpreading))*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//content+=(Knowledge | KnowledgeSpreading)
		public Assignment getContentAssignment_2_0() { return cContentAssignment_2_0; }
		
		//(Knowledge | KnowledgeSpreading)
		public Alternatives getContentAlternatives_2_0_0() { return cContentAlternatives_2_0_0; }
		
		//Knowledge
		public RuleCall getContentKnowledgeParserRuleCall_2_0_0_0() { return cContentKnowledgeParserRuleCall_2_0_0_0; }
		
		//KnowledgeSpreading
		public RuleCall getContentKnowledgeSpreadingParserRuleCall_2_0_0_1() { return cContentKnowledgeSpreadingParserRuleCall_2_0_0_1; }
		
		//(',' content+=(Knowledge | KnowledgeSpreading))*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//content+=(Knowledge | KnowledgeSpreading)
		public Assignment getContentAssignment_2_1_1() { return cContentAssignment_2_1_1; }
		
		//(Knowledge | KnowledgeSpreading)
		public Alternatives getContentAlternatives_2_1_1_0() { return cContentAlternatives_2_1_1_0; }
		
		//Knowledge
		public RuleCall getContentKnowledgeParserRuleCall_2_1_1_0_0() { return cContentKnowledgeParserRuleCall_2_1_1_0_0; }
		
		//KnowledgeSpreading
		public RuleCall getContentKnowledgeSpreadingParserRuleCall_2_1_1_0_1() { return cContentKnowledgeSpreadingParserRuleCall_2_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class KnowledgeSpreadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeSpreading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRefAlternatives_1_0 = (Alternatives)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefKnowledgeRefParserRuleCall_1_0_0 = (RuleCall)cRefAlternatives_1_0.eContents().get(0);
		private final RuleCall cRefKnowledgeSetParserRuleCall_1_0_1 = (RuleCall)cRefAlternatives_1_0.eContents().get(1);
		private final RuleCall cRefKnowledgeListParserRuleCall_1_0_2 = (RuleCall)cRefAlternatives_1_0.eContents().get(2);
		
		//KnowledgeSpreading:
		//    '...' ref=(KnowledgeRef | KnowledgeSet | KnowledgeList);
		@Override public ParserRule getRule() { return rule; }
		
		//'...' ref=(KnowledgeRef | KnowledgeSet | KnowledgeList)
		public Group getGroup() { return cGroup; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_0() { return cFullStopFullStopFullStopKeyword_0; }
		
		//ref=(KnowledgeRef | KnowledgeSet | KnowledgeList)
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//(KnowledgeRef | KnowledgeSet | KnowledgeList)
		public Alternatives getRefAlternatives_1_0() { return cRefAlternatives_1_0; }
		
		//KnowledgeRef
		public RuleCall getRefKnowledgeRefParserRuleCall_1_0_0() { return cRefKnowledgeRefParserRuleCall_1_0_0; }
		
		//KnowledgeSet
		public RuleCall getRefKnowledgeSetParserRuleCall_1_0_1() { return cRefKnowledgeSetParserRuleCall_1_0_1; }
		
		//KnowledgeList
		public RuleCall getRefKnowledgeListParserRuleCall_1_0_2() { return cRefKnowledgeListParserRuleCall_1_0_2; }
	}
	public class KnowledgeGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeGenerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//KnowledgeGenerator:
		//    'gen' type=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'gen' type=STRING
		public Group getGroup() { return cGroup; }
		
		//'gen'
		public Keyword getGenKeyword_0() { return cGenKeyword_0; }
		
		//type=STRING
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_1_0() { return cTypeSTRINGTerminalRuleCall_1_0; }
	}
	public class KnowledgeFromFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeFromFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsKnowledgeFromFunctionArgParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeyKnowledgeValueParserRuleCall_4_1_0 = (RuleCall)cKeyAssignment_4_1.eContents().get(0);
		
		//KnowledgeFromFunction:
		//    name=ID '(' args=KnowledgeFromFunctionArg? ')'
		//    ('with' key=KnowledgeValue)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' args=KnowledgeFromFunctionArg? ')'
		//('with' key=KnowledgeValue)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args=KnowledgeFromFunctionArg?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//KnowledgeFromFunctionArg
		public RuleCall getArgsKnowledgeFromFunctionArgParserRuleCall_2_0() { return cArgsKnowledgeFromFunctionArgParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('with' key=KnowledgeValue)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//key=KnowledgeValue
		public Assignment getKeyAssignment_4_1() { return cKeyAssignment_4_1; }
		
		//KnowledgeValue
		public RuleCall getKeyKnowledgeValueParserRuleCall_4_1_0() { return cKeyKnowledgeValueParserRuleCall_4_1_0; }
	}
	public class KnowledgeFromFunctionArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeFromFunctionArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArgsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgsKnowledgeValueParserRuleCall_0_0_0 = (RuleCall)cArgsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cArgsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cArgsKnowledgeValueParserRuleCall_0_1_1_0 = (RuleCall)cArgsAssignment_0_1_1.eContents().get(0);
		private final RuleCall cKnowledgeSpreadingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//KnowledgeFromFunctionArg:
		//    (args+=KnowledgeValue (',' args+=KnowledgeValue)* )
		//    | KnowledgeSpreading
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(args+=KnowledgeValue (',' args+=KnowledgeValue)* )
		//| KnowledgeSpreading
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(args+=KnowledgeValue (',' args+=KnowledgeValue)* )
		public Group getGroup_0() { return cGroup_0; }
		
		//args+=KnowledgeValue
		public Assignment getArgsAssignment_0_0() { return cArgsAssignment_0_0; }
		
		//KnowledgeValue
		public RuleCall getArgsKnowledgeValueParserRuleCall_0_0_0() { return cArgsKnowledgeValueParserRuleCall_0_0_0; }
		
		//(',' args+=KnowledgeValue)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//args+=KnowledgeValue
		public Assignment getArgsAssignment_0_1_1() { return cArgsAssignment_0_1_1; }
		
		//KnowledgeValue
		public RuleCall getArgsKnowledgeValueParserRuleCall_0_1_1_0() { return cArgsKnowledgeValueParserRuleCall_0_1_1_0; }
		
		//KnowledgeSpreading
		public RuleCall getKnowledgeSpreadingParserRuleCall_1() { return cKnowledgeSpreadingParserRuleCall_1; }
	}
	public class CommunicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.Communication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromIDTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFromAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFromIDTerminalRuleCall_1_1_0 = (RuleCall)cFromAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToIDTerminalRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cToAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cToIDTerminalRuleCall_4_1_0 = (RuleCall)cToAssignment_4_1.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cKnowledgeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cKnowledgeKnowledgeParserRuleCall_6_0 = (RuleCall)cKnowledgeAssignment_6.eContents().get(0);
		
		//Communication:
		//    from+=ID (',' from+=ID)* '->' to+=ID (',' to+=ID)* ':' knowledge=Knowledge;
		@Override public ParserRule getRule() { return rule; }
		
		//from+=ID (',' from+=ID)* '->' to+=ID (',' to+=ID)* ':' knowledge=Knowledge
		public Group getGroup() { return cGroup; }
		
		//from+=ID
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//ID
		public RuleCall getFromIDTerminalRuleCall_0_0() { return cFromIDTerminalRuleCall_0_0; }
		
		//(',' from+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//from+=ID
		public Assignment getFromAssignment_1_1() { return cFromAssignment_1_1; }
		
		//ID
		public RuleCall getFromIDTerminalRuleCall_1_1_0() { return cFromIDTerminalRuleCall_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//to+=ID
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//ID
		public RuleCall getToIDTerminalRuleCall_3_0() { return cToIDTerminalRuleCall_3_0; }
		
		//(',' to+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//to+=ID
		public Assignment getToAssignment_4_1() { return cToAssignment_4_1; }
		
		//ID
		public RuleCall getToIDTerminalRuleCall_4_1_0() { return cToIDTerminalRuleCall_4_1_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//knowledge=Knowledge
		public Assignment getKnowledgeAssignment_6() { return cKnowledgeAssignment_6; }
		
		//Knowledge
		public RuleCall getKnowledgeKnowledgeParserRuleCall_6_0() { return cKnowledgeKnowledgeParserRuleCall_6_0; }
	}
	public class ScenarioBranchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.ScenarioBranching");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScenarioOptionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioAlternativesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ScenarioBranching:
		//    ScenarioOptional
		//    | ScenarioAlternatives;
		@Override public ParserRule getRule() { return rule; }
		
		//ScenarioOptional
		//| ScenarioAlternatives
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScenarioOptional
		public RuleCall getScenarioOptionalParserRuleCall_0() { return cScenarioOptionalParserRuleCall_0; }
		
		//ScenarioAlternatives
		public RuleCall getScenarioAlternativesParserRuleCall_1() { return cScenarioAlternativesParserRuleCall_1; }
	}
	public class ScenarioOptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.ScenarioOptional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionallyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScenarioScenarioParserRuleCall_1_0 = (RuleCall)cScenarioAssignment_1.eContents().get(0);
		
		//ScenarioOptional: 'optionally' scenario+=Scenario;
		@Override public ParserRule getRule() { return rule; }
		
		//'optionally' scenario+=Scenario
		public Group getGroup() { return cGroup; }
		
		//'optionally'
		public Keyword getOptionallyKeyword_0() { return cOptionallyKeyword_0; }
		
		//scenario+=Scenario
		public Assignment getScenarioAssignment_1() { return cScenarioAssignment_1; }
		
		//Scenario
		public RuleCall getScenarioScenarioParserRuleCall_1_0() { return cScenarioScenarioParserRuleCall_1_0; }
	}
	public class ScenarioAlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.ScenarioAlternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativelyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cScenarioAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cScenarioScenarioParserRuleCall_1_1_0 = (RuleCall)cScenarioAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOrKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScenarioAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScenarioScenarioParserRuleCall_2_1_0 = (RuleCall)cScenarioAssignment_2_1.eContents().get(0);
		
		//ScenarioAlternatives: 'alternatively' ('or' scenario+=Scenario) ('or' scenario+=Scenario)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'alternatively' ('or' scenario+=Scenario) ('or' scenario+=Scenario)+
		public Group getGroup() { return cGroup; }
		
		//'alternatively'
		public Keyword getAlternativelyKeyword_0() { return cAlternativelyKeyword_0; }
		
		//('or' scenario+=Scenario)
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//scenario+=Scenario
		public Assignment getScenarioAssignment_1_1() { return cScenarioAssignment_1_1; }
		
		//Scenario
		public RuleCall getScenarioScenarioParserRuleCall_1_1_0() { return cScenarioScenarioParserRuleCall_1_1_0; }
		
		//('or' scenario+=Scenario)+
		public Group getGroup_2() { return cGroup_2; }
		
		//'or'
		public Keyword getOrKeyword_2_0() { return cOrKeyword_2_0; }
		
		//scenario+=Scenario
		public Assignment getScenarioAssignment_2_1() { return cScenarioAssignment_2_1; }
		
		//Scenario
		public RuleCall getScenarioScenarioParserRuleCall_2_1_0() { return cScenarioScenarioParserRuleCall_2_1_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Scenario: (name=STRING)? '{' elements+=Element+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(name=STRING)? '{' elements+=Element+ '}'
		public Group getGroup() { return cGroup; }
		
		//(name=STRING)?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cKnowledgeCheckParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cEqualityCheckParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cFreshnessCheckParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cLinkabilityCheckParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cAuthenticationCheckParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		
		//Check:
		//    'check' (KnowledgeCheck
		//    | EqualityCheck
		//    | FreshnessCheck
		//    | LinkabilityCheck
		//    | AuthenticationCheck);
		@Override public ParserRule getRule() { return rule; }
		
		//'check' (KnowledgeCheck
		//| EqualityCheck
		//| FreshnessCheck
		//| LinkabilityCheck
		//| AuthenticationCheck)
		public Group getGroup() { return cGroup; }
		
		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//(KnowledgeCheck
		//   | EqualityCheck
		//   | FreshnessCheck
		//   | LinkabilityCheck
		//   | AuthenticationCheck)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//KnowledgeCheck
		public RuleCall getKnowledgeCheckParserRuleCall_1_0() { return cKnowledgeCheckParserRuleCall_1_0; }
		
		//EqualityCheck
		public RuleCall getEqualityCheckParserRuleCall_1_1() { return cEqualityCheckParserRuleCall_1_1; }
		
		//FreshnessCheck
		public RuleCall getFreshnessCheckParserRuleCall_1_2() { return cFreshnessCheckParserRuleCall_1_2; }
		
		//LinkabilityCheck
		public RuleCall getLinkabilityCheckParserRuleCall_1_3() { return cLinkabilityCheckParserRuleCall_1_3; }
		
		//AuthenticationCheck
		public RuleCall getAuthenticationCheckParserRuleCall_1_4() { return cAuthenticationCheckParserRuleCall_1_4; }
	}
	public class KnowledgeCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.KnowledgeCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHereAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHereHereKeyword_0_0 = (Keyword)cHereAssignment_0.eContents().get(0);
		private final Assignment cOnlyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOnlyOnlyKeyword_1_0 = (Keyword)cOnlyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTargetIDTerminalRuleCall_2_0_0 = (RuleCall)cTargetAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTargetAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTargetIDTerminalRuleCall_2_1_1_0 = (RuleCall)cTargetAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cShouldKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNotAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cNotNotKeyword_3_1_0 = (Keyword)cNotAssignment_3_1.eContents().get(0);
		private final Keyword cKnowKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cKnowledgeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKnowledgeKnowledgeValueParserRuleCall_4_0 = (RuleCall)cKnowledgeAssignment_4.eContents().get(0);
		
		//KnowledgeCheck:
		//    (here?='here')? (only?='only')? (target+=ID (',' target+=ID)*) ('should' (not?='not')? 'know') knowledge=KnowledgeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//(here?='here')? (only?='only')? (target+=ID (',' target+=ID)*) ('should' (not?='not')? 'know') knowledge=KnowledgeValue
		public Group getGroup() { return cGroup; }
		
		//(here?='here')?
		public Assignment getHereAssignment_0() { return cHereAssignment_0; }
		
		//'here'
		public Keyword getHereHereKeyword_0_0() { return cHereHereKeyword_0_0; }
		
		//(only?='only')?
		public Assignment getOnlyAssignment_1() { return cOnlyAssignment_1; }
		
		//'only'
		public Keyword getOnlyOnlyKeyword_1_0() { return cOnlyOnlyKeyword_1_0; }
		
		//(target+=ID (',' target+=ID)*)
		public Group getGroup_2() { return cGroup_2; }
		
		//target+=ID
		public Assignment getTargetAssignment_2_0() { return cTargetAssignment_2_0; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_2_0_0() { return cTargetIDTerminalRuleCall_2_0_0; }
		
		//(',' target+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//target+=ID
		public Assignment getTargetAssignment_2_1_1() { return cTargetAssignment_2_1_1; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_2_1_1_0() { return cTargetIDTerminalRuleCall_2_1_1_0; }
		
		//('should' (not?='not')? 'know')
		public Group getGroup_3() { return cGroup_3; }
		
		//'should'
		public Keyword getShouldKeyword_3_0() { return cShouldKeyword_3_0; }
		
		//(not?='not')?
		public Assignment getNotAssignment_3_1() { return cNotAssignment_3_1; }
		
		//'not'
		public Keyword getNotNotKeyword_3_1_0() { return cNotNotKeyword_3_1_0; }
		
		//'know'
		public Keyword getKnowKeyword_3_2() { return cKnowKeyword_3_2; }
		
		//knowledge=KnowledgeValue
		public Assignment getKnowledgeAssignment_4() { return cKnowledgeAssignment_4; }
		
		//KnowledgeValue
		public RuleCall getKnowledgeKnowledgeValueParserRuleCall_4_0() { return cKnowledgeKnowledgeValueParserRuleCall_4_0; }
	}
	public class EqualityCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.EqualityCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKnowledgeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKnowledgeKnowledgeRefParserRuleCall_0_0 = (RuleCall)cKnowledgeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKnowledgeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKnowledgeKnowledgeRefParserRuleCall_1_1_0 = (RuleCall)cKnowledgeAssignment_1_1.eContents().get(0);
		private final Keyword cShouldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNotNotKeyword_3_0 = (Keyword)cNotAssignment_3.eContents().get(0);
		private final Keyword cBeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EqualityCheck:
		//    knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)+ 'should' (not?='not')? 'be' 'equal';
		@Override public ParserRule getRule() { return rule; }
		
		//knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)+ 'should' (not?='not')? 'be' 'equal'
		public Group getGroup() { return cGroup; }
		
		//knowledge+=KnowledgeRef
		public Assignment getKnowledgeAssignment_0() { return cKnowledgeAssignment_0; }
		
		//KnowledgeRef
		public RuleCall getKnowledgeKnowledgeRefParserRuleCall_0_0() { return cKnowledgeKnowledgeRefParserRuleCall_0_0; }
		
		//(',' knowledge+=KnowledgeRef)+
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//knowledge+=KnowledgeRef
		public Assignment getKnowledgeAssignment_1_1() { return cKnowledgeAssignment_1_1; }
		
		//KnowledgeRef
		public RuleCall getKnowledgeKnowledgeRefParserRuleCall_1_1_0() { return cKnowledgeKnowledgeRefParserRuleCall_1_1_0; }
		
		//'should'
		public Keyword getShouldKeyword_2() { return cShouldKeyword_2; }
		
		//(not?='not')?
		public Assignment getNotAssignment_3() { return cNotAssignment_3; }
		
		//'not'
		public Keyword getNotNotKeyword_3_0() { return cNotNotKeyword_3_0; }
		
		//'be'
		public Keyword getBeKeyword_4() { return cBeKeyword_4; }
		
		//'equal'
		public Keyword getEqualKeyword_5() { return cEqualKeyword_5; }
	}
	public class FreshnessCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.FreshnessCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKnowledgeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKnowledgeKnowledgeRefParserRuleCall_0_0 = (RuleCall)cKnowledgeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKnowledgeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKnowledgeKnowledgeRefParserRuleCall_1_1_0 = (RuleCall)cKnowledgeAssignment_1_1.eContents().get(0);
		private final Keyword cShouldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNotNotKeyword_3_0 = (Keyword)cNotAssignment_3.eContents().get(0);
		private final Keyword cBeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFreshKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FreshnessCheck:
		//    knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)* 'should' (not?='not')? 'be' 'fresh';
		@Override public ParserRule getRule() { return rule; }
		
		//knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)* 'should' (not?='not')? 'be' 'fresh'
		public Group getGroup() { return cGroup; }
		
		//knowledge+=KnowledgeRef
		public Assignment getKnowledgeAssignment_0() { return cKnowledgeAssignment_0; }
		
		//KnowledgeRef
		public RuleCall getKnowledgeKnowledgeRefParserRuleCall_0_0() { return cKnowledgeKnowledgeRefParserRuleCall_0_0; }
		
		//(',' knowledge+=KnowledgeRef)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//knowledge+=KnowledgeRef
		public Assignment getKnowledgeAssignment_1_1() { return cKnowledgeAssignment_1_1; }
		
		//KnowledgeRef
		public RuleCall getKnowledgeKnowledgeRefParserRuleCall_1_1_0() { return cKnowledgeKnowledgeRefParserRuleCall_1_1_0; }
		
		//'should'
		public Keyword getShouldKeyword_2() { return cShouldKeyword_2; }
		
		//(not?='not')?
		public Assignment getNotAssignment_3() { return cNotAssignment_3; }
		
		//'not'
		public Keyword getNotNotKeyword_3_0() { return cNotNotKeyword_3_0; }
		
		//'be'
		public Keyword getBeKeyword_4() { return cBeKeyword_4; }
		
		//'fresh'
		public Keyword getFreshKeyword_5() { return cFreshKeyword_5; }
	}
	public class LinkabilityCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.LinkabilityCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKnowledgeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKnowledgeKnowledgeRefParserRuleCall_0_0 = (RuleCall)cKnowledgeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKnowledgeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKnowledgeKnowledgeRefParserRuleCall_1_1_0 = (RuleCall)cKnowledgeAssignment_1_1.eContents().get(0);
		private final Keyword cShouldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNotNotKeyword_3_0 = (Keyword)cNotAssignment_3.eContents().get(0);
		private final Keyword cBeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLinkedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LinkabilityCheck:
		//    knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)+ 'should' (not?='not')? 'be' 'linked';
		@Override public ParserRule getRule() { return rule; }
		
		//knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)+ 'should' (not?='not')? 'be' 'linked'
		public Group getGroup() { return cGroup; }
		
		//knowledge+=KnowledgeRef
		public Assignment getKnowledgeAssignment_0() { return cKnowledgeAssignment_0; }
		
		//KnowledgeRef
		public RuleCall getKnowledgeKnowledgeRefParserRuleCall_0_0() { return cKnowledgeKnowledgeRefParserRuleCall_0_0; }
		
		//(',' knowledge+=KnowledgeRef)+
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//knowledge+=KnowledgeRef
		public Assignment getKnowledgeAssignment_1_1() { return cKnowledgeAssignment_1_1; }
		
		//KnowledgeRef
		public RuleCall getKnowledgeKnowledgeRefParserRuleCall_1_1_0() { return cKnowledgeKnowledgeRefParserRuleCall_1_1_0; }
		
		//'should'
		public Keyword getShouldKeyword_2() { return cShouldKeyword_2; }
		
		//(not?='not')?
		public Assignment getNotAssignment_3() { return cNotAssignment_3; }
		
		//'not'
		public Keyword getNotNotKeyword_3_0() { return cNotNotKeyword_3_0; }
		
		//'be'
		public Keyword getBeKeyword_4() { return cBeKeyword_4; }
		
		//'linked'
		public Keyword getLinkedKeyword_5() { return cLinkedKeyword_5; }
	}
	public class AuthenticationCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.AuthenticationCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrincipalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrincipalIDTerminalRuleCall_0_0 = (RuleCall)cPrincipalAssignment_0.eContents().get(0);
		private final Keyword cShouldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAuthenticateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetIDTerminalRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cKnowledgeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cKnowledgeKnowledgeValueParserRuleCall_5_0 = (RuleCall)cKnowledgeAssignment_5.eContents().get(0);
		
		//AuthenticationCheck:
		//    principal=ID 'should' 'authenticate' target=ID 'with' knowledge=KnowledgeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//principal=ID 'should' 'authenticate' target=ID 'with' knowledge=KnowledgeValue
		public Group getGroup() { return cGroup; }
		
		//principal=ID
		public Assignment getPrincipalAssignment_0() { return cPrincipalAssignment_0; }
		
		//ID
		public RuleCall getPrincipalIDTerminalRuleCall_0_0() { return cPrincipalIDTerminalRuleCall_0_0; }
		
		//'should'
		public Keyword getShouldKeyword_1() { return cShouldKeyword_1; }
		
		//'authenticate'
		public Keyword getAuthenticateKeyword_2() { return cAuthenticateKeyword_2; }
		
		//target=ID
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_3_0() { return cTargetIDTerminalRuleCall_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//knowledge=KnowledgeValue
		public Assignment getKnowledgeAssignment_5() { return cKnowledgeAssignment_5; }
		
		//KnowledgeValue
		public RuleCall getKnowledgeKnowledgeValueParserRuleCall_5_0() { return cKnowledgeKnowledgeValueParserRuleCall_5_0; }
	}
	
	
	private final ProtocolElements pProtocol;
	private final ElementElements pElement;
	private final UniversalIntroductionElements pUniversalIntroduction;
	private final FunctionDefElements pFunctionDef;
	private final FunctionParamElements pFunctionParam;
	private final FunctionKeyElements pFunctionKey;
	private final FunctionKeyElementElements pFunctionKeyElement;
	private final FunctionReturnElements pFunctionReturn;
	private final FunctionReturnElementElements pFunctionReturnElement;
	private final PropertyDefElements pPropertyDef;
	private final KnowledgeEqualityDefElements pKnowledgeEqualityDef;
	private final FunctionInversionDefElements pFunctionInversionDef;
	private final KnowledgeBaseElements pKnowledgeBase;
	private final PrincipalElements pPrincipal;
	private final KnowledgeElements pKnowledge;
	private final KnowledgeDefElements pKnowledgeDef;
	private final KnowledgeDefDestructuringElements pKnowledgeDefDestructuring;
	private final KnowledgeDefSetDestructuringElements pKnowledgeDefSetDestructuring;
	private final KnowledgeDefSetDesctructuringAssignmentElements pKnowledgeDefSetDesctructuringAssignment;
	private final KnowledgeDefListDestructuringElements pKnowledgeDefListDestructuring;
	private final KnowledgeDefListDesctructuringAssignmentElements pKnowledgeDefListDesctructuringAssignment;
	private final KnowledgeValueElements pKnowledgeValue;
	private final KnowledgeListElements pKnowledgeList;
	private final KnowledgeRefElements pKnowledgeRef;
	private final KnowledgeSetElements pKnowledgeSet;
	private final KnowledgeSpreadingElements pKnowledgeSpreading;
	private final KnowledgeGeneratorElements pKnowledgeGenerator;
	private final KnowledgeFromFunctionElements pKnowledgeFromFunction;
	private final KnowledgeFromFunctionArgElements pKnowledgeFromFunctionArg;
	private final CommunicationElements pCommunication;
	private final ScenarioBranchingElements pScenarioBranching;
	private final ScenarioOptionalElements pScenarioOptional;
	private final ScenarioAlternativesElements pScenarioAlternatives;
	private final ScenarioElements pScenario;
	private final CheckElements pCheck;
	private final KnowledgeCheckElements pKnowledgeCheck;
	private final EqualityCheckElements pEqualityCheck;
	private final FreshnessCheckElements pFreshnessCheck;
	private final LinkabilityCheckElements pLinkabilityCheck;
	private final AuthenticationCheckElements pAuthenticationCheck;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public KantGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pProtocol = new ProtocolElements();
		this.pElement = new ElementElements();
		this.pUniversalIntroduction = new UniversalIntroductionElements();
		this.pFunctionDef = new FunctionDefElements();
		this.pFunctionParam = new FunctionParamElements();
		this.pFunctionKey = new FunctionKeyElements();
		this.pFunctionKeyElement = new FunctionKeyElementElements();
		this.pFunctionReturn = new FunctionReturnElements();
		this.pFunctionReturnElement = new FunctionReturnElementElements();
		this.pPropertyDef = new PropertyDefElements();
		this.pKnowledgeEqualityDef = new KnowledgeEqualityDefElements();
		this.pFunctionInversionDef = new FunctionInversionDefElements();
		this.pKnowledgeBase = new KnowledgeBaseElements();
		this.pPrincipal = new PrincipalElements();
		this.pKnowledge = new KnowledgeElements();
		this.pKnowledgeDef = new KnowledgeDefElements();
		this.pKnowledgeDefDestructuring = new KnowledgeDefDestructuringElements();
		this.pKnowledgeDefSetDestructuring = new KnowledgeDefSetDestructuringElements();
		this.pKnowledgeDefSetDesctructuringAssignment = new KnowledgeDefSetDesctructuringAssignmentElements();
		this.pKnowledgeDefListDestructuring = new KnowledgeDefListDestructuringElements();
		this.pKnowledgeDefListDesctructuringAssignment = new KnowledgeDefListDesctructuringAssignmentElements();
		this.pKnowledgeValue = new KnowledgeValueElements();
		this.pKnowledgeList = new KnowledgeListElements();
		this.pKnowledgeRef = new KnowledgeRefElements();
		this.pKnowledgeSet = new KnowledgeSetElements();
		this.pKnowledgeSpreading = new KnowledgeSpreadingElements();
		this.pKnowledgeGenerator = new KnowledgeGeneratorElements();
		this.pKnowledgeFromFunction = new KnowledgeFromFunctionElements();
		this.pKnowledgeFromFunctionArg = new KnowledgeFromFunctionArgElements();
		this.pCommunication = new CommunicationElements();
		this.pScenarioBranching = new ScenarioBranchingElements();
		this.pScenarioOptional = new ScenarioOptionalElements();
		this.pScenarioAlternatives = new ScenarioAlternativesElements();
		this.pScenario = new ScenarioElements();
		this.pCheck = new CheckElements();
		this.pKnowledgeCheck = new KnowledgeCheckElements();
		this.pEqualityCheck = new EqualityCheckElements();
		this.pFreshnessCheck = new FreshnessCheckElements();
		this.pLinkabilityCheck = new LinkabilityCheckElements();
		this.pAuthenticationCheck = new AuthenticationCheckElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unimi.xtext.Kant.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unimi.xtext.Kant".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Protocol:
	//    elements+=Element*;
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}
	
	//Element:
	//    FunctionDef | PropertyDef | KnowledgeBase | Principal | Communication | ScenarioBranching | Check;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//UniversalIntroduction:
	//    ('forall' args+=ID (',' args+=ID)* ':')
	//;
	public UniversalIntroductionElements getUniversalIntroductionAccess() {
		return pUniversalIntroduction;
	}
	
	public ParserRule getUniversalIntroductionRule() {
		return getUniversalIntroductionAccess().getRule();
	}
	
	//FunctionDef:
	//    'function'
	//    (intro=UniversalIntroduction)?
	//    name+=ID
	//    ('(' params+=FunctionParam (',' params+=FunctionParam)* ')')?
	//    ( 'with' key=FunctionKey)?
	//    (
	//        '->' return=FunctionReturn
	//    )?
	//    (randomized?='randomized')?
	//    (ow?='one' 'way')?
	//;
	public FunctionDefElements getFunctionDefAccess() {
		return pFunctionDef;
	}
	
	public ParserRule getFunctionDefRule() {
		return getFunctionDefAccess().getRule();
	}
	
	//FunctionParam:
	//    (variadic?='...')? name=ID (opt?='?')? ('=' type=KnowledgeValue)?
	//;
	public FunctionParamElements getFunctionParamAccess() {
		return pFunctionParam;
	}
	
	public ParserRule getFunctionParamRule() {
		return getFunctionParamAccess().getRule();
	}
	
	//FunctionKey:
	//    elements+=FunctionKeyElement
	//    | '{' elements+=FunctionKeyElement (',' elements+=FunctionKeyElement)* '}';
	public FunctionKeyElements getFunctionKeyAccess() {
		return pFunctionKey;
	}
	
	public ParserRule getFunctionKeyRule() {
		return getFunctionKeyAccess().getRule();
	}
	
	//FunctionKeyElement:
	//    name+=ID ('=' type=KnowledgeValue)?
	//;
	public FunctionKeyElementElements getFunctionKeyElementAccess() {
		return pFunctionKeyElement;
	}
	
	public ParserRule getFunctionKeyElementRule() {
		return getFunctionKeyElementAccess().getRule();
	}
	
	//FunctionReturn:
	//    elements+=FunctionReturnElement
	//    | '{' elements+=FunctionReturnElement (',' elements+=FunctionReturnElement)* '}'
	//;
	public FunctionReturnElements getFunctionReturnAccess() {
		return pFunctionReturn;
	}
	
	public ParserRule getFunctionReturnRule() {
		return getFunctionReturnAccess().getRule();
	}
	
	//FunctionReturnElement:
	//    name+=ID ('=' type=KnowledgeValue)?
	//;
	public FunctionReturnElementElements getFunctionReturnElementAccess() {
		return pFunctionReturnElement;
	}
	
	public ParserRule getFunctionReturnElementRule() {
		return getFunctionReturnElementAccess().getRule();
	}
	
	//PropertyDef:
	//    'property' property=(KnowledgeEqualityDef | FunctionInversionDef)
	//;
	public PropertyDefElements getPropertyDefAccess() {
		return pPropertyDef;
	}
	
	public ParserRule getPropertyDefRule() {
		return getPropertyDefAccess().getRule();
	}
	
	//KnowledgeEqualityDef:
	//    (intro=UniversalIntroduction)?
	//    value=KnowledgeValue 'equals' target=KnowledgeValue
	//;
	public KnowledgeEqualityDefElements getKnowledgeEqualityDefAccess() {
		return pKnowledgeEqualityDef;
	}
	
	public ParserRule getKnowledgeEqualityDefRule() {
		return getKnowledgeEqualityDefAccess().getRule();
	}
	
	//FunctionInversionDef:
	//    inverter=ID 'invert' function=ID
	//;
	public FunctionInversionDefElements getFunctionInversionDefAccess() {
		return pFunctionInversionDef;
	}
	
	public ParserRule getFunctionInversionDefRule() {
		return getFunctionInversionDefAccess().getRule();
	}
	
	//KnowledgeBase:
	//    (shared?='shared')? 'knowledge' knowledge=Knowledge;
	public KnowledgeBaseElements getKnowledgeBaseAccess() {
		return pKnowledgeBase;
	}
	
	public ParserRule getKnowledgeBaseRule() {
		return getKnowledgeBaseAccess().getRule();
	}
	
	//Principal:
	//    'principal' name+=ID (',' name+=ID)* ('know' knowledge=Knowledge)?;
	public PrincipalElements getPrincipalAccess() {
		return pPrincipal;
	}
	
	public ParserRule getPrincipalRule() {
		return getPrincipalAccess().getRule();
	}
	
	//Knowledge:
	//    KnowledgeDef | KnowledgeValue;
	public KnowledgeElements getKnowledgeAccess() {
		return pKnowledge;
	}
	
	public ParserRule getKnowledgeRule() {
		return getKnowledgeAccess().getRule();
	}
	
	//KnowledgeDef:
	//    (name+=ID | KnowledgeDefDestructuring) '=' value=KnowledgeValue
	//    | ('const' | 'fresh') (name+=ID | '{' name+=ID (',' name+=ID)* '}');
	public KnowledgeDefElements getKnowledgeDefAccess() {
		return pKnowledgeDef;
	}
	
	public ParserRule getKnowledgeDefRule() {
		return getKnowledgeDefAccess().getRule();
	}
	
	//KnowledgeDefDestructuring:
	//    KnowledgeDefSetDestructuring
	//    | KnowledgeDefListDestructuring
	//;
	public KnowledgeDefDestructuringElements getKnowledgeDefDestructuringAccess() {
		return pKnowledgeDefDestructuring;
	}
	
	public ParserRule getKnowledgeDefDestructuringRule() {
		return getKnowledgeDefDestructuringAccess().getRule();
	}
	
	//KnowledgeDefSetDestructuring:
	//    {KnowledgeDefSetDestructuring} '{' (assignments+=KnowledgeDefSetDesctructuringAssignment (',' assignments+=KnowledgeDefSetDesctructuringAssignment)*)? '}'
	//;
	public KnowledgeDefSetDestructuringElements getKnowledgeDefSetDestructuringAccess() {
		return pKnowledgeDefSetDestructuring;
	}
	
	public ParserRule getKnowledgeDefSetDestructuringRule() {
		return getKnowledgeDefSetDestructuringAccess().getRule();
	}
	
	//KnowledgeDefSetDesctructuringAssignment:
	//    name=ID ('=' from=ID)?
	//;
	public KnowledgeDefSetDesctructuringAssignmentElements getKnowledgeDefSetDesctructuringAssignmentAccess() {
		return pKnowledgeDefSetDesctructuringAssignment;
	}
	
	public ParserRule getKnowledgeDefSetDesctructuringAssignmentRule() {
		return getKnowledgeDefSetDesctructuringAssignmentAccess().getRule();
	}
	
	//KnowledgeDefListDestructuring:
	//    {KnowledgeDefListDestructuring} '[' (assignments+=KnowledgeDefListDesctructuringAssignment (',' assignments+=KnowledgeDefListDesctructuringAssignment)*)? ']'
	//;
	public KnowledgeDefListDestructuringElements getKnowledgeDefListDestructuringAccess() {
		return pKnowledgeDefListDestructuring;
	}
	
	public ParserRule getKnowledgeDefListDestructuringRule() {
		return getKnowledgeDefListDestructuringAccess().getRule();
	}
	
	//KnowledgeDefListDesctructuringAssignment:
	//    {KnowledgeDefListDesctructuringAssignment} '...'
	//    | {KnowledgeDefListDesctructuringAssignment} '_'
	//    | name=ID
	//;
	public KnowledgeDefListDesctructuringAssignmentElements getKnowledgeDefListDesctructuringAssignmentAccess() {
		return pKnowledgeDefListDesctructuringAssignment;
	}
	
	public ParserRule getKnowledgeDefListDesctructuringAssignmentRule() {
		return getKnowledgeDefListDesctructuringAssignmentAccess().getRule();
	}
	
	//KnowledgeValue:
	//    KnowledgeRef
	//    | KnowledgeList
	//    | KnowledgeSet
	//    | KnowledgeGenerator
	//    | KnowledgeFromFunction
	//;
	public KnowledgeValueElements getKnowledgeValueAccess() {
		return pKnowledgeValue;
	}
	
	public ParserRule getKnowledgeValueRule() {
		return getKnowledgeValueAccess().getRule();
	}
	
	//KnowledgeList:
	//    {KnowledgeList} '[' (values+=(KnowledgeValue | KnowledgeSpreading) (',' values+=(KnowledgeValue | KnowledgeSpreading))*)? ']';
	public KnowledgeListElements getKnowledgeListAccess() {
		return pKnowledgeList;
	}
	
	public ParserRule getKnowledgeListRule() {
		return getKnowledgeListAccess().getRule();
	}
	
	//KnowledgeRef:
	//    ref=ID ('.' access+=ID)*;
	public KnowledgeRefElements getKnowledgeRefAccess() {
		return pKnowledgeRef;
	}
	
	public ParserRule getKnowledgeRefRule() {
		return getKnowledgeRefAccess().getRule();
	}
	
	//KnowledgeSet:
	//    {KnowledgeSet} '{' (content+=(Knowledge | KnowledgeSpreading) (',' content+=(Knowledge | KnowledgeSpreading))*)? '}';
	public KnowledgeSetElements getKnowledgeSetAccess() {
		return pKnowledgeSet;
	}
	
	public ParserRule getKnowledgeSetRule() {
		return getKnowledgeSetAccess().getRule();
	}
	
	//KnowledgeSpreading:
	//    '...' ref=(KnowledgeRef | KnowledgeSet | KnowledgeList);
	public KnowledgeSpreadingElements getKnowledgeSpreadingAccess() {
		return pKnowledgeSpreading;
	}
	
	public ParserRule getKnowledgeSpreadingRule() {
		return getKnowledgeSpreadingAccess().getRule();
	}
	
	//KnowledgeGenerator:
	//    'gen' type=STRING;
	public KnowledgeGeneratorElements getKnowledgeGeneratorAccess() {
		return pKnowledgeGenerator;
	}
	
	public ParserRule getKnowledgeGeneratorRule() {
		return getKnowledgeGeneratorAccess().getRule();
	}
	
	//KnowledgeFromFunction:
	//    name=ID '(' args=KnowledgeFromFunctionArg? ')'
	//    ('with' key=KnowledgeValue)?;
	public KnowledgeFromFunctionElements getKnowledgeFromFunctionAccess() {
		return pKnowledgeFromFunction;
	}
	
	public ParserRule getKnowledgeFromFunctionRule() {
		return getKnowledgeFromFunctionAccess().getRule();
	}
	
	//KnowledgeFromFunctionArg:
	//    (args+=KnowledgeValue (',' args+=KnowledgeValue)* )
	//    | KnowledgeSpreading
	//;
	public KnowledgeFromFunctionArgElements getKnowledgeFromFunctionArgAccess() {
		return pKnowledgeFromFunctionArg;
	}
	
	public ParserRule getKnowledgeFromFunctionArgRule() {
		return getKnowledgeFromFunctionArgAccess().getRule();
	}
	
	//Communication:
	//    from+=ID (',' from+=ID)* '->' to+=ID (',' to+=ID)* ':' knowledge=Knowledge;
	public CommunicationElements getCommunicationAccess() {
		return pCommunication;
	}
	
	public ParserRule getCommunicationRule() {
		return getCommunicationAccess().getRule();
	}
	
	//ScenarioBranching:
	//    ScenarioOptional
	//    | ScenarioAlternatives;
	public ScenarioBranchingElements getScenarioBranchingAccess() {
		return pScenarioBranching;
	}
	
	public ParserRule getScenarioBranchingRule() {
		return getScenarioBranchingAccess().getRule();
	}
	
	//ScenarioOptional: 'optionally' scenario+=Scenario;
	public ScenarioOptionalElements getScenarioOptionalAccess() {
		return pScenarioOptional;
	}
	
	public ParserRule getScenarioOptionalRule() {
		return getScenarioOptionalAccess().getRule();
	}
	
	//ScenarioAlternatives: 'alternatively' ('or' scenario+=Scenario) ('or' scenario+=Scenario)+;
	public ScenarioAlternativesElements getScenarioAlternativesAccess() {
		return pScenarioAlternatives;
	}
	
	public ParserRule getScenarioAlternativesRule() {
		return getScenarioAlternativesAccess().getRule();
	}
	
	//Scenario: (name=STRING)? '{' elements+=Element+ '}';
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//Check:
	//    'check' (KnowledgeCheck
	//    | EqualityCheck
	//    | FreshnessCheck
	//    | LinkabilityCheck
	//    | AuthenticationCheck);
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//KnowledgeCheck:
	//    (here?='here')? (only?='only')? (target+=ID (',' target+=ID)*) ('should' (not?='not')? 'know') knowledge=KnowledgeValue;
	public KnowledgeCheckElements getKnowledgeCheckAccess() {
		return pKnowledgeCheck;
	}
	
	public ParserRule getKnowledgeCheckRule() {
		return getKnowledgeCheckAccess().getRule();
	}
	
	//EqualityCheck:
	//    knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)+ 'should' (not?='not')? 'be' 'equal';
	public EqualityCheckElements getEqualityCheckAccess() {
		return pEqualityCheck;
	}
	
	public ParserRule getEqualityCheckRule() {
		return getEqualityCheckAccess().getRule();
	}
	
	//FreshnessCheck:
	//    knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)* 'should' (not?='not')? 'be' 'fresh';
	public FreshnessCheckElements getFreshnessCheckAccess() {
		return pFreshnessCheck;
	}
	
	public ParserRule getFreshnessCheckRule() {
		return getFreshnessCheckAccess().getRule();
	}
	
	//LinkabilityCheck:
	//    knowledge+=KnowledgeRef (',' knowledge+=KnowledgeRef)+ 'should' (not?='not')? 'be' 'linked';
	public LinkabilityCheckElements getLinkabilityCheckAccess() {
		return pLinkabilityCheck;
	}
	
	public ParserRule getLinkabilityCheckRule() {
		return getLinkabilityCheckAccess().getRule();
	}
	
	//AuthenticationCheck:
	//    principal=ID 'should' 'authenticate' target=ID 'with' knowledge=KnowledgeValue;
	public AuthenticationCheckElements getAuthenticationCheckAccess() {
		return pAuthenticationCheck;
	}
	
	public ParserRule getAuthenticationCheckRule() {
		return getAuthenticationCheckAccess().getRule();
	}
	
	//terminal ID: ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
