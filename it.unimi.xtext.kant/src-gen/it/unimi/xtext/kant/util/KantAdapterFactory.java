/**
 * generated by Xtext 2.29.0
 */
package it.unimi.xtext.kant.util;

import it.unimi.xtext.kant.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see it.unimi.xtext.kant.KantPackage
 * @generated
 */
public class KantAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static KantPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KantAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = KantPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KantSwitch<Adapter> modelSwitch =
    new KantSwitch<Adapter>()
    {
      @Override
      public Adapter caseProtocol(Protocol object)
      {
        return createProtocolAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseUniversalIntroduction(UniversalIntroduction object)
      {
        return createUniversalIntroductionAdapter();
      }
      @Override
      public Adapter caseFunctionDef(FunctionDef object)
      {
        return createFunctionDefAdapter();
      }
      @Override
      public Adapter caseFunctionParam(FunctionParam object)
      {
        return createFunctionParamAdapter();
      }
      @Override
      public Adapter caseFunctionKey(FunctionKey object)
      {
        return createFunctionKeyAdapter();
      }
      @Override
      public Adapter caseFunctionKeyElement(FunctionKeyElement object)
      {
        return createFunctionKeyElementAdapter();
      }
      @Override
      public Adapter caseFunctionReturn(FunctionReturn object)
      {
        return createFunctionReturnAdapter();
      }
      @Override
      public Adapter caseFunctionReturnElement(FunctionReturnElement object)
      {
        return createFunctionReturnElementAdapter();
      }
      @Override
      public Adapter casePropertyDef(PropertyDef object)
      {
        return createPropertyDefAdapter();
      }
      @Override
      public Adapter caseKnowledgeEqualityDef(KnowledgeEqualityDef object)
      {
        return createKnowledgeEqualityDefAdapter();
      }
      @Override
      public Adapter caseFunctionInversionDef(FunctionInversionDef object)
      {
        return createFunctionInversionDefAdapter();
      }
      @Override
      public Adapter caseKnowledgeBase(KnowledgeBase object)
      {
        return createKnowledgeBaseAdapter();
      }
      @Override
      public Adapter casePrincipal(Principal object)
      {
        return createPrincipalAdapter();
      }
      @Override
      public Adapter caseKnowledge(Knowledge object)
      {
        return createKnowledgeAdapter();
      }
      @Override
      public Adapter caseKnowledgeDef(KnowledgeDef object)
      {
        return createKnowledgeDefAdapter();
      }
      @Override
      public Adapter caseKnowledgeDefDestructuring(KnowledgeDefDestructuring object)
      {
        return createKnowledgeDefDestructuringAdapter();
      }
      @Override
      public Adapter caseKnowledgeDefSetDestructuring(KnowledgeDefSetDestructuring object)
      {
        return createKnowledgeDefSetDestructuringAdapter();
      }
      @Override
      public Adapter caseKnowledgeDefSetDesctructuringAssignment(KnowledgeDefSetDesctructuringAssignment object)
      {
        return createKnowledgeDefSetDesctructuringAssignmentAdapter();
      }
      @Override
      public Adapter caseKnowledgeDefListDestructuring(KnowledgeDefListDestructuring object)
      {
        return createKnowledgeDefListDestructuringAdapter();
      }
      @Override
      public Adapter caseKnowledgeDefListDesctructuringAssignment(KnowledgeDefListDesctructuringAssignment object)
      {
        return createKnowledgeDefListDesctructuringAssignmentAdapter();
      }
      @Override
      public Adapter caseKnowledgeValue(KnowledgeValue object)
      {
        return createKnowledgeValueAdapter();
      }
      @Override
      public Adapter caseKnowledgeList(KnowledgeList object)
      {
        return createKnowledgeListAdapter();
      }
      @Override
      public Adapter caseKnowledgeRef(KnowledgeRef object)
      {
        return createKnowledgeRefAdapter();
      }
      @Override
      public Adapter caseKnowledgeSet(KnowledgeSet object)
      {
        return createKnowledgeSetAdapter();
      }
      @Override
      public Adapter caseKnowledgeSpreading(KnowledgeSpreading object)
      {
        return createKnowledgeSpreadingAdapter();
      }
      @Override
      public Adapter caseKnowledgeGenerator(KnowledgeGenerator object)
      {
        return createKnowledgeGeneratorAdapter();
      }
      @Override
      public Adapter caseKnowledgeFromFunction(KnowledgeFromFunction object)
      {
        return createKnowledgeFromFunctionAdapter();
      }
      @Override
      public Adapter caseKnowledgeFromFunctionArg(KnowledgeFromFunctionArg object)
      {
        return createKnowledgeFromFunctionArgAdapter();
      }
      @Override
      public Adapter caseCommunication(Communication object)
      {
        return createCommunicationAdapter();
      }
      @Override
      public Adapter caseScenarioBranching(ScenarioBranching object)
      {
        return createScenarioBranchingAdapter();
      }
      @Override
      public Adapter caseScenarioOptional(ScenarioOptional object)
      {
        return createScenarioOptionalAdapter();
      }
      @Override
      public Adapter caseScenarioAlternatives(ScenarioAlternatives object)
      {
        return createScenarioAlternativesAdapter();
      }
      @Override
      public Adapter caseScenario(Scenario object)
      {
        return createScenarioAdapter();
      }
      @Override
      public Adapter caseCheck(Check object)
      {
        return createCheckAdapter();
      }
      @Override
      public Adapter caseKnowledgeCheck(KnowledgeCheck object)
      {
        return createKnowledgeCheckAdapter();
      }
      @Override
      public Adapter caseEqualityCheck(EqualityCheck object)
      {
        return createEqualityCheckAdapter();
      }
      @Override
      public Adapter caseFreshnessCheck(FreshnessCheck object)
      {
        return createFreshnessCheckAdapter();
      }
      @Override
      public Adapter caseLinkabilityCheck(LinkabilityCheck object)
      {
        return createLinkabilityCheckAdapter();
      }
      @Override
      public Adapter caseAuthenticationCheck(AuthenticationCheck object)
      {
        return createAuthenticationCheckAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.Protocol <em>Protocol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.Protocol
   * @generated
   */
  public Adapter createProtocolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.UniversalIntroduction <em>Universal Introduction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.UniversalIntroduction
   * @generated
   */
  public Adapter createUniversalIntroductionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FunctionDef <em>Function Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FunctionDef
   * @generated
   */
  public Adapter createFunctionDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FunctionParam <em>Function Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FunctionParam
   * @generated
   */
  public Adapter createFunctionParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FunctionKey <em>Function Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FunctionKey
   * @generated
   */
  public Adapter createFunctionKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FunctionKeyElement <em>Function Key Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FunctionKeyElement
   * @generated
   */
  public Adapter createFunctionKeyElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FunctionReturn <em>Function Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FunctionReturn
   * @generated
   */
  public Adapter createFunctionReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FunctionReturnElement <em>Function Return Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FunctionReturnElement
   * @generated
   */
  public Adapter createFunctionReturnElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.PropertyDef <em>Property Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.PropertyDef
   * @generated
   */
  public Adapter createPropertyDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeEqualityDef <em>Knowledge Equality Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeEqualityDef
   * @generated
   */
  public Adapter createKnowledgeEqualityDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FunctionInversionDef <em>Function Inversion Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FunctionInversionDef
   * @generated
   */
  public Adapter createFunctionInversionDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeBase <em>Knowledge Base</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeBase
   * @generated
   */
  public Adapter createKnowledgeBaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.Principal <em>Principal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.Principal
   * @generated
   */
  public Adapter createPrincipalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.Knowledge <em>Knowledge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.Knowledge
   * @generated
   */
  public Adapter createKnowledgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeDef <em>Knowledge Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeDef
   * @generated
   */
  public Adapter createKnowledgeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeDefDestructuring <em>Knowledge Def Destructuring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeDefDestructuring
   * @generated
   */
  public Adapter createKnowledgeDefDestructuringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeDefSetDestructuring <em>Knowledge Def Set Destructuring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeDefSetDestructuring
   * @generated
   */
  public Adapter createKnowledgeDefSetDestructuringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeDefSetDesctructuringAssignment <em>Knowledge Def Set Desctructuring Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeDefSetDesctructuringAssignment
   * @generated
   */
  public Adapter createKnowledgeDefSetDesctructuringAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeDefListDestructuring <em>Knowledge Def List Destructuring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeDefListDestructuring
   * @generated
   */
  public Adapter createKnowledgeDefListDestructuringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeDefListDesctructuringAssignment <em>Knowledge Def List Desctructuring Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeDefListDesctructuringAssignment
   * @generated
   */
  public Adapter createKnowledgeDefListDesctructuringAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeValue <em>Knowledge Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeValue
   * @generated
   */
  public Adapter createKnowledgeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeList <em>Knowledge List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeList
   * @generated
   */
  public Adapter createKnowledgeListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeRef <em>Knowledge Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeRef
   * @generated
   */
  public Adapter createKnowledgeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeSet <em>Knowledge Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeSet
   * @generated
   */
  public Adapter createKnowledgeSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeSpreading <em>Knowledge Spreading</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeSpreading
   * @generated
   */
  public Adapter createKnowledgeSpreadingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeGenerator <em>Knowledge Generator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeGenerator
   * @generated
   */
  public Adapter createKnowledgeGeneratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeFromFunction <em>Knowledge From Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeFromFunction
   * @generated
   */
  public Adapter createKnowledgeFromFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeFromFunctionArg <em>Knowledge From Function Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeFromFunctionArg
   * @generated
   */
  public Adapter createKnowledgeFromFunctionArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.Communication <em>Communication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.Communication
   * @generated
   */
  public Adapter createCommunicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.ScenarioBranching <em>Scenario Branching</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.ScenarioBranching
   * @generated
   */
  public Adapter createScenarioBranchingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.ScenarioOptional <em>Scenario Optional</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.ScenarioOptional
   * @generated
   */
  public Adapter createScenarioOptionalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.ScenarioAlternatives <em>Scenario Alternatives</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.ScenarioAlternatives
   * @generated
   */
  public Adapter createScenarioAlternativesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.Scenario <em>Scenario</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.Scenario
   * @generated
   */
  public Adapter createScenarioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.Check <em>Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.Check
   * @generated
   */
  public Adapter createCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.KnowledgeCheck <em>Knowledge Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.KnowledgeCheck
   * @generated
   */
  public Adapter createKnowledgeCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.EqualityCheck <em>Equality Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.EqualityCheck
   * @generated
   */
  public Adapter createEqualityCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.FreshnessCheck <em>Freshness Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.FreshnessCheck
   * @generated
   */
  public Adapter createFreshnessCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.LinkabilityCheck <em>Linkability Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.LinkabilityCheck
   * @generated
   */
  public Adapter createLinkabilityCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unimi.xtext.kant.AuthenticationCheck <em>Authentication Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unimi.xtext.kant.AuthenticationCheck
   * @generated
   */
  public Adapter createAuthenticationCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //KantAdapterFactory
