/**
 * generated by Xtext 2.29.0
 */
package it.unimi.xtext.kant.util;

import it.unimi.xtext.kant.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see it.unimi.xtext.kant.KantPackage
 * @generated
 */
public class KantSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static KantPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KantSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = KantPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case KantPackage.PROTOCOL:
      {
        Protocol protocol = (Protocol)theEObject;
        T result = caseProtocol(protocol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.UNIVERSAL_INTRODUCTION:
      {
        UniversalIntroduction universalIntroduction = (UniversalIntroduction)theEObject;
        T result = caseUniversalIntroduction(universalIntroduction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FUNCTION_DEF:
      {
        FunctionDef functionDef = (FunctionDef)theEObject;
        T result = caseFunctionDef(functionDef);
        if (result == null) result = caseElement(functionDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FUNCTION_PARAM:
      {
        FunctionParam functionParam = (FunctionParam)theEObject;
        T result = caseFunctionParam(functionParam);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FUNCTION_KEY:
      {
        FunctionKey functionKey = (FunctionKey)theEObject;
        T result = caseFunctionKey(functionKey);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FUNCTION_KEY_ELEMENT:
      {
        FunctionKeyElement functionKeyElement = (FunctionKeyElement)theEObject;
        T result = caseFunctionKeyElement(functionKeyElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FUNCTION_RETURN:
      {
        FunctionReturn functionReturn = (FunctionReturn)theEObject;
        T result = caseFunctionReturn(functionReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FUNCTION_RETURN_ELEMENT:
      {
        FunctionReturnElement functionReturnElement = (FunctionReturnElement)theEObject;
        T result = caseFunctionReturnElement(functionReturnElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.PROPERTY_DEF:
      {
        PropertyDef propertyDef = (PropertyDef)theEObject;
        T result = casePropertyDef(propertyDef);
        if (result == null) result = caseElement(propertyDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_EQUALITY_DEF:
      {
        KnowledgeEqualityDef knowledgeEqualityDef = (KnowledgeEqualityDef)theEObject;
        T result = caseKnowledgeEqualityDef(knowledgeEqualityDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FUNCTION_INVERSION_DEF:
      {
        FunctionInversionDef functionInversionDef = (FunctionInversionDef)theEObject;
        T result = caseFunctionInversionDef(functionInversionDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_BASE:
      {
        KnowledgeBase knowledgeBase = (KnowledgeBase)theEObject;
        T result = caseKnowledgeBase(knowledgeBase);
        if (result == null) result = caseElement(knowledgeBase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.PRINCIPAL:
      {
        Principal principal = (Principal)theEObject;
        T result = casePrincipal(principal);
        if (result == null) result = caseElement(principal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE:
      {
        Knowledge knowledge = (Knowledge)theEObject;
        T result = caseKnowledge(knowledge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_DEF:
      {
        KnowledgeDef knowledgeDef = (KnowledgeDef)theEObject;
        T result = caseKnowledgeDef(knowledgeDef);
        if (result == null) result = caseKnowledge(knowledgeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_DEF_DESTRUCTURING:
      {
        KnowledgeDefDestructuring knowledgeDefDestructuring = (KnowledgeDefDestructuring)theEObject;
        T result = caseKnowledgeDefDestructuring(knowledgeDefDestructuring);
        if (result == null) result = caseKnowledgeDef(knowledgeDefDestructuring);
        if (result == null) result = caseKnowledge(knowledgeDefDestructuring);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_DEF_SET_DESTRUCTURING:
      {
        KnowledgeDefSetDestructuring knowledgeDefSetDestructuring = (KnowledgeDefSetDestructuring)theEObject;
        T result = caseKnowledgeDefSetDestructuring(knowledgeDefSetDestructuring);
        if (result == null) result = caseKnowledgeDefDestructuring(knowledgeDefSetDestructuring);
        if (result == null) result = caseKnowledgeDef(knowledgeDefSetDestructuring);
        if (result == null) result = caseKnowledge(knowledgeDefSetDestructuring);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_DEF_SET_DESCTRUCTURING_ASSIGNMENT:
      {
        KnowledgeDefSetDesctructuringAssignment knowledgeDefSetDesctructuringAssignment = (KnowledgeDefSetDesctructuringAssignment)theEObject;
        T result = caseKnowledgeDefSetDesctructuringAssignment(knowledgeDefSetDesctructuringAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_DEF_LIST_DESTRUCTURING:
      {
        KnowledgeDefListDestructuring knowledgeDefListDestructuring = (KnowledgeDefListDestructuring)theEObject;
        T result = caseKnowledgeDefListDestructuring(knowledgeDefListDestructuring);
        if (result == null) result = caseKnowledgeDefDestructuring(knowledgeDefListDestructuring);
        if (result == null) result = caseKnowledgeDef(knowledgeDefListDestructuring);
        if (result == null) result = caseKnowledge(knowledgeDefListDestructuring);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_DEF_LIST_DESCTRUCTURING_ASSIGNMENT:
      {
        KnowledgeDefListDesctructuringAssignment knowledgeDefListDesctructuringAssignment = (KnowledgeDefListDesctructuringAssignment)theEObject;
        T result = caseKnowledgeDefListDesctructuringAssignment(knowledgeDefListDesctructuringAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_VALUE:
      {
        KnowledgeValue knowledgeValue = (KnowledgeValue)theEObject;
        T result = caseKnowledgeValue(knowledgeValue);
        if (result == null) result = caseKnowledge(knowledgeValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_LIST:
      {
        KnowledgeList knowledgeList = (KnowledgeList)theEObject;
        T result = caseKnowledgeList(knowledgeList);
        if (result == null) result = caseKnowledgeValue(knowledgeList);
        if (result == null) result = caseKnowledge(knowledgeList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_REF:
      {
        KnowledgeRef knowledgeRef = (KnowledgeRef)theEObject;
        T result = caseKnowledgeRef(knowledgeRef);
        if (result == null) result = caseKnowledgeValue(knowledgeRef);
        if (result == null) result = caseKnowledge(knowledgeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_SET:
      {
        KnowledgeSet knowledgeSet = (KnowledgeSet)theEObject;
        T result = caseKnowledgeSet(knowledgeSet);
        if (result == null) result = caseKnowledgeValue(knowledgeSet);
        if (result == null) result = caseKnowledge(knowledgeSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_SPREADING:
      {
        KnowledgeSpreading knowledgeSpreading = (KnowledgeSpreading)theEObject;
        T result = caseKnowledgeSpreading(knowledgeSpreading);
        if (result == null) result = caseKnowledgeFromFunctionArg(knowledgeSpreading);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_GENERATOR:
      {
        KnowledgeGenerator knowledgeGenerator = (KnowledgeGenerator)theEObject;
        T result = caseKnowledgeGenerator(knowledgeGenerator);
        if (result == null) result = caseKnowledgeValue(knowledgeGenerator);
        if (result == null) result = caseKnowledge(knowledgeGenerator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_FROM_FUNCTION:
      {
        KnowledgeFromFunction knowledgeFromFunction = (KnowledgeFromFunction)theEObject;
        T result = caseKnowledgeFromFunction(knowledgeFromFunction);
        if (result == null) result = caseKnowledgeValue(knowledgeFromFunction);
        if (result == null) result = caseKnowledge(knowledgeFromFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_FROM_FUNCTION_ARG:
      {
        KnowledgeFromFunctionArg knowledgeFromFunctionArg = (KnowledgeFromFunctionArg)theEObject;
        T result = caseKnowledgeFromFunctionArg(knowledgeFromFunctionArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.COMMUNICATION:
      {
        Communication communication = (Communication)theEObject;
        T result = caseCommunication(communication);
        if (result == null) result = caseElement(communication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.SCENARIO_BRANCHING:
      {
        ScenarioBranching scenarioBranching = (ScenarioBranching)theEObject;
        T result = caseScenarioBranching(scenarioBranching);
        if (result == null) result = caseElement(scenarioBranching);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.SCENARIO_OPTIONAL:
      {
        ScenarioOptional scenarioOptional = (ScenarioOptional)theEObject;
        T result = caseScenarioOptional(scenarioOptional);
        if (result == null) result = caseScenarioBranching(scenarioOptional);
        if (result == null) result = caseElement(scenarioOptional);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.SCENARIO_ALTERNATIVES:
      {
        ScenarioAlternatives scenarioAlternatives = (ScenarioAlternatives)theEObject;
        T result = caseScenarioAlternatives(scenarioAlternatives);
        if (result == null) result = caseScenarioBranching(scenarioAlternatives);
        if (result == null) result = caseElement(scenarioAlternatives);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.SCENARIO:
      {
        Scenario scenario = (Scenario)theEObject;
        T result = caseScenario(scenario);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.CHECK:
      {
        Check check = (Check)theEObject;
        T result = caseCheck(check);
        if (result == null) result = caseElement(check);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.KNOWLEDGE_CHECK:
      {
        KnowledgeCheck knowledgeCheck = (KnowledgeCheck)theEObject;
        T result = caseKnowledgeCheck(knowledgeCheck);
        if (result == null) result = caseCheck(knowledgeCheck);
        if (result == null) result = caseElement(knowledgeCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.EQUALITY_CHECK:
      {
        EqualityCheck equalityCheck = (EqualityCheck)theEObject;
        T result = caseEqualityCheck(equalityCheck);
        if (result == null) result = caseCheck(equalityCheck);
        if (result == null) result = caseElement(equalityCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.FRESHNESS_CHECK:
      {
        FreshnessCheck freshnessCheck = (FreshnessCheck)theEObject;
        T result = caseFreshnessCheck(freshnessCheck);
        if (result == null) result = caseCheck(freshnessCheck);
        if (result == null) result = caseElement(freshnessCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.LINKABILITY_CHECK:
      {
        LinkabilityCheck linkabilityCheck = (LinkabilityCheck)theEObject;
        T result = caseLinkabilityCheck(linkabilityCheck);
        if (result == null) result = caseCheck(linkabilityCheck);
        if (result == null) result = caseElement(linkabilityCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case KantPackage.AUTHENTICATION_CHECK:
      {
        AuthenticationCheck authenticationCheck = (AuthenticationCheck)theEObject;
        T result = caseAuthenticationCheck(authenticationCheck);
        if (result == null) result = caseCheck(authenticationCheck);
        if (result == null) result = caseElement(authenticationCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Protocol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Protocol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProtocol(Protocol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Universal Introduction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Universal Introduction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniversalIntroduction(UniversalIntroduction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDef(FunctionDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Param</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Param</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionParam(FunctionParam object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Key</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Key</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionKey(FunctionKey object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Key Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Key Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionKeyElement(FunctionKeyElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionReturn(FunctionReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Return Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Return Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionReturnElement(FunctionReturnElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyDef(PropertyDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Equality Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Equality Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeEqualityDef(KnowledgeEqualityDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Inversion Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Inversion Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionInversionDef(FunctionInversionDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Base</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Base</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeBase(KnowledgeBase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Principal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Principal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrincipal(Principal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledge(Knowledge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeDef(KnowledgeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Def Destructuring</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Def Destructuring</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeDefDestructuring(KnowledgeDefDestructuring object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Def Set Destructuring</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Def Set Destructuring</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeDefSetDestructuring(KnowledgeDefSetDestructuring object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Def Set Desctructuring Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Def Set Desctructuring Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeDefSetDesctructuringAssignment(KnowledgeDefSetDesctructuringAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Def List Destructuring</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Def List Destructuring</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeDefListDestructuring(KnowledgeDefListDestructuring object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Def List Desctructuring Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Def List Desctructuring Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeDefListDesctructuringAssignment(KnowledgeDefListDesctructuringAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeValue(KnowledgeValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeList(KnowledgeList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeRef(KnowledgeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeSet(KnowledgeSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Spreading</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Spreading</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeSpreading(KnowledgeSpreading object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Generator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Generator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeGenerator(KnowledgeGenerator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge From Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge From Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeFromFunction(KnowledgeFromFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge From Function Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge From Function Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeFromFunctionArg(KnowledgeFromFunctionArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Communication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Communication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommunication(Communication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenario Branching</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenario Branching</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenarioBranching(ScenarioBranching object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenario Optional</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenario Optional</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenarioOptional(ScenarioOptional object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenario Alternatives</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenario Alternatives</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenarioAlternatives(ScenarioAlternatives object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenario</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenario</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenario(Scenario object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheck(Check object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Knowledge Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Knowledge Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKnowledgeCheck(KnowledgeCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityCheck(EqualityCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Freshness Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Freshness Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFreshnessCheck(FreshnessCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Linkability Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Linkability Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinkabilityCheck(LinkabilityCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Authentication Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Authentication Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAuthenticationCheck(AuthenticationCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //KantSwitch
