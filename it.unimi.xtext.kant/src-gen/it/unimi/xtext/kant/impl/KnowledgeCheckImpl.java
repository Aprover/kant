/**
 * generated by Xtext 2.29.0
 */
package it.unimi.xtext.kant.impl;

import it.unimi.xtext.kant.KantPackage;
import it.unimi.xtext.kant.KnowledgeCheck;
import it.unimi.xtext.kant.KnowledgeValue;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Knowledge Check</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unimi.xtext.kant.impl.KnowledgeCheckImpl#isHere <em>Here</em>}</li>
 *   <li>{@link it.unimi.xtext.kant.impl.KnowledgeCheckImpl#isOnly <em>Only</em>}</li>
 *   <li>{@link it.unimi.xtext.kant.impl.KnowledgeCheckImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link it.unimi.xtext.kant.impl.KnowledgeCheckImpl#isNot <em>Not</em>}</li>
 *   <li>{@link it.unimi.xtext.kant.impl.KnowledgeCheckImpl#getKnowledge <em>Knowledge</em>}</li>
 * </ul>
 *
 * @generated
 */
public class KnowledgeCheckImpl extends CheckImpl implements KnowledgeCheck
{
  /**
   * The default value of the '{@link #isHere() <em>Here</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHere()
   * @generated
   * @ordered
   */
  protected static final boolean HERE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHere() <em>Here</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHere()
   * @generated
   * @ordered
   */
  protected boolean here = HERE_EDEFAULT;

  /**
   * The default value of the '{@link #isOnly() <em>Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnly()
   * @generated
   * @ordered
   */
  protected static final boolean ONLY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOnly() <em>Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnly()
   * @generated
   * @ordered
   */
  protected boolean only = ONLY_EDEFAULT;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected EList<String> target;

  /**
   * The default value of the '{@link #isNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNot()
   * @generated
   * @ordered
   */
  protected static final boolean NOT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNot()
   * @generated
   * @ordered
   */
  protected boolean not = NOT_EDEFAULT;

  /**
   * The cached value of the '{@link #getKnowledge() <em>Knowledge</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKnowledge()
   * @generated
   * @ordered
   */
  protected KnowledgeValue knowledge;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KnowledgeCheckImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KantPackage.Literals.KNOWLEDGE_CHECK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isHere()
  {
    return here;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHere(boolean newHere)
  {
    boolean oldHere = here;
    here = newHere;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KantPackage.KNOWLEDGE_CHECK__HERE, oldHere, here));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOnly()
  {
    return only;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnly(boolean newOnly)
  {
    boolean oldOnly = only;
    only = newOnly;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KantPackage.KNOWLEDGE_CHECK__ONLY, oldOnly, only));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getTarget()
  {
    if (target == null)
    {
      target = new EDataTypeEList<String>(String.class, this, KantPackage.KNOWLEDGE_CHECK__TARGET);
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNot()
  {
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNot(boolean newNot)
  {
    boolean oldNot = not;
    not = newNot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KantPackage.KNOWLEDGE_CHECK__NOT, oldNot, not));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeValue getKnowledge()
  {
    return knowledge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetKnowledge(KnowledgeValue newKnowledge, NotificationChain msgs)
  {
    KnowledgeValue oldKnowledge = knowledge;
    knowledge = newKnowledge;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE, oldKnowledge, newKnowledge);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKnowledge(KnowledgeValue newKnowledge)
  {
    if (newKnowledge != knowledge)
    {
      NotificationChain msgs = null;
      if (knowledge != null)
        msgs = ((InternalEObject)knowledge).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE, null, msgs);
      if (newKnowledge != null)
        msgs = ((InternalEObject)newKnowledge).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE, null, msgs);
      msgs = basicSetKnowledge(newKnowledge, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE, newKnowledge, newKnowledge));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE:
        return basicSetKnowledge(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KantPackage.KNOWLEDGE_CHECK__HERE:
        return isHere();
      case KantPackage.KNOWLEDGE_CHECK__ONLY:
        return isOnly();
      case KantPackage.KNOWLEDGE_CHECK__TARGET:
        return getTarget();
      case KantPackage.KNOWLEDGE_CHECK__NOT:
        return isNot();
      case KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE:
        return getKnowledge();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KantPackage.KNOWLEDGE_CHECK__HERE:
        setHere((Boolean)newValue);
        return;
      case KantPackage.KNOWLEDGE_CHECK__ONLY:
        setOnly((Boolean)newValue);
        return;
      case KantPackage.KNOWLEDGE_CHECK__TARGET:
        getTarget().clear();
        getTarget().addAll((Collection<? extends String>)newValue);
        return;
      case KantPackage.KNOWLEDGE_CHECK__NOT:
        setNot((Boolean)newValue);
        return;
      case KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE:
        setKnowledge((KnowledgeValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KantPackage.KNOWLEDGE_CHECK__HERE:
        setHere(HERE_EDEFAULT);
        return;
      case KantPackage.KNOWLEDGE_CHECK__ONLY:
        setOnly(ONLY_EDEFAULT);
        return;
      case KantPackage.KNOWLEDGE_CHECK__TARGET:
        getTarget().clear();
        return;
      case KantPackage.KNOWLEDGE_CHECK__NOT:
        setNot(NOT_EDEFAULT);
        return;
      case KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE:
        setKnowledge((KnowledgeValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KantPackage.KNOWLEDGE_CHECK__HERE:
        return here != HERE_EDEFAULT;
      case KantPackage.KNOWLEDGE_CHECK__ONLY:
        return only != ONLY_EDEFAULT;
      case KantPackage.KNOWLEDGE_CHECK__TARGET:
        return target != null && !target.isEmpty();
      case KantPackage.KNOWLEDGE_CHECK__NOT:
        return not != NOT_EDEFAULT;
      case KantPackage.KNOWLEDGE_CHECK__KNOWLEDGE:
        return knowledge != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (here: ");
    result.append(here);
    result.append(", only: ");
    result.append(only);
    result.append(", target: ");
    result.append(target);
    result.append(", not: ");
    result.append(not);
    result.append(')');
    return result.toString();
  }

} //KnowledgeCheckImpl
