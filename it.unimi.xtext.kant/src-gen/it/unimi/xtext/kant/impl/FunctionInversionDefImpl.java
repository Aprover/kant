/**
 * generated by Xtext 2.29.0
 */
package it.unimi.xtext.kant.impl;

import it.unimi.xtext.kant.FunctionInversionDef;
import it.unimi.xtext.kant.KantPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function Inversion Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unimi.xtext.kant.impl.FunctionInversionDefImpl#getInverter <em>Inverter</em>}</li>
 *   <li>{@link it.unimi.xtext.kant.impl.FunctionInversionDefImpl#getFunction <em>Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionInversionDefImpl extends MinimalEObjectImpl.Container implements FunctionInversionDef
{
  /**
   * The default value of the '{@link #getInverter() <em>Inverter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInverter()
   * @generated
   * @ordered
   */
  protected static final String INVERTER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInverter() <em>Inverter</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInverter()
   * @generated
   * @ordered
   */
  protected String inverter = INVERTER_EDEFAULT;

  /**
   * The default value of the '{@link #getFunction() <em>Function</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected static final String FUNCTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFunction() <em>Function</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected String function = FUNCTION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionInversionDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KantPackage.Literals.FUNCTION_INVERSION_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getInverter()
  {
    return inverter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInverter(String newInverter)
  {
    String oldInverter = inverter;
    inverter = newInverter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KantPackage.FUNCTION_INVERSION_DEF__INVERTER, oldInverter, inverter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFunction()
  {
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunction(String newFunction)
  {
    String oldFunction = function;
    function = newFunction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KantPackage.FUNCTION_INVERSION_DEF__FUNCTION, oldFunction, function));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KantPackage.FUNCTION_INVERSION_DEF__INVERTER:
        return getInverter();
      case KantPackage.FUNCTION_INVERSION_DEF__FUNCTION:
        return getFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KantPackage.FUNCTION_INVERSION_DEF__INVERTER:
        setInverter((String)newValue);
        return;
      case KantPackage.FUNCTION_INVERSION_DEF__FUNCTION:
        setFunction((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KantPackage.FUNCTION_INVERSION_DEF__INVERTER:
        setInverter(INVERTER_EDEFAULT);
        return;
      case KantPackage.FUNCTION_INVERSION_DEF__FUNCTION:
        setFunction(FUNCTION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KantPackage.FUNCTION_INVERSION_DEF__INVERTER:
        return INVERTER_EDEFAULT == null ? inverter != null : !INVERTER_EDEFAULT.equals(inverter);
      case KantPackage.FUNCTION_INVERSION_DEF__FUNCTION:
        return FUNCTION_EDEFAULT == null ? function != null : !FUNCTION_EDEFAULT.equals(function);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inverter: ");
    result.append(inverter);
    result.append(", function: ");
    result.append(function);
    result.append(')');
    return result.toString();
  }

} //FunctionInversionDefImpl
