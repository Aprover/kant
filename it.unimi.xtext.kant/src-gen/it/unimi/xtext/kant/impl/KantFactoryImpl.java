/**
 * generated by Xtext 2.29.0
 */
package it.unimi.xtext.kant.impl;

import it.unimi.xtext.kant.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class KantFactoryImpl extends EFactoryImpl implements KantFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static KantFactory init()
  {
    try
    {
      KantFactory theKantFactory = (KantFactory)EPackage.Registry.INSTANCE.getEFactory(KantPackage.eNS_URI);
      if (theKantFactory != null)
      {
        return theKantFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new KantFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KantFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case KantPackage.PROTOCOL: return createProtocol();
      case KantPackage.ELEMENT: return createElement();
      case KantPackage.UNIVERSAL_INTRODUCTION: return createUniversalIntroduction();
      case KantPackage.FUNCTION_DEF: return createFunctionDef();
      case KantPackage.FUNCTION_PARAM: return createFunctionParam();
      case KantPackage.FUNCTION_KEY: return createFunctionKey();
      case KantPackage.FUNCTION_KEY_ELEMENT: return createFunctionKeyElement();
      case KantPackage.FUNCTION_RETURN: return createFunctionReturn();
      case KantPackage.FUNCTION_RETURN_ELEMENT: return createFunctionReturnElement();
      case KantPackage.PROPERTY_DEF: return createPropertyDef();
      case KantPackage.KNOWLEDGE_EQUALITY_DEF: return createKnowledgeEqualityDef();
      case KantPackage.FUNCTION_INVERSION_DEF: return createFunctionInversionDef();
      case KantPackage.KNOWLEDGE_BASE: return createKnowledgeBase();
      case KantPackage.PRINCIPAL: return createPrincipal();
      case KantPackage.KNOWLEDGE: return createKnowledge();
      case KantPackage.KNOWLEDGE_DEF: return createKnowledgeDef();
      case KantPackage.KNOWLEDGE_DEF_DESTRUCTURING: return createKnowledgeDefDestructuring();
      case KantPackage.KNOWLEDGE_DEF_SET_DESTRUCTURING: return createKnowledgeDefSetDestructuring();
      case KantPackage.KNOWLEDGE_DEF_SET_DESCTRUCTURING_ASSIGNMENT: return createKnowledgeDefSetDesctructuringAssignment();
      case KantPackage.KNOWLEDGE_DEF_LIST_DESTRUCTURING: return createKnowledgeDefListDestructuring();
      case KantPackage.KNOWLEDGE_DEF_LIST_DESCTRUCTURING_ASSIGNMENT: return createKnowledgeDefListDesctructuringAssignment();
      case KantPackage.KNOWLEDGE_VALUE: return createKnowledgeValue();
      case KantPackage.KNOWLEDGE_LIST: return createKnowledgeList();
      case KantPackage.KNOWLEDGE_REF: return createKnowledgeRef();
      case KantPackage.KNOWLEDGE_SET: return createKnowledgeSet();
      case KantPackage.KNOWLEDGE_SPREADING: return createKnowledgeSpreading();
      case KantPackage.KNOWLEDGE_GENERATOR: return createKnowledgeGenerator();
      case KantPackage.KNOWLEDGE_FROM_FUNCTION: return createKnowledgeFromFunction();
      case KantPackage.KNOWLEDGE_FROM_FUNCTION_ARG: return createKnowledgeFromFunctionArg();
      case KantPackage.COMMUNICATION: return createCommunication();
      case KantPackage.SCENARIO_BRANCHING: return createScenarioBranching();
      case KantPackage.SCENARIO_OPTIONAL: return createScenarioOptional();
      case KantPackage.SCENARIO_ALTERNATIVES: return createScenarioAlternatives();
      case KantPackage.SCENARIO: return createScenario();
      case KantPackage.CHECK: return createCheck();
      case KantPackage.KNOWLEDGE_CHECK: return createKnowledgeCheck();
      case KantPackage.EQUALITY_CHECK: return createEqualityCheck();
      case KantPackage.FRESHNESS_CHECK: return createFreshnessCheck();
      case KantPackage.LINKABILITY_CHECK: return createLinkabilityCheck();
      case KantPackage.AUTHENTICATION_CHECK: return createAuthenticationCheck();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Protocol createProtocol()
  {
    ProtocolImpl protocol = new ProtocolImpl();
    return protocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UniversalIntroduction createUniversalIntroduction()
  {
    UniversalIntroductionImpl universalIntroduction = new UniversalIntroductionImpl();
    return universalIntroduction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDef createFunctionDef()
  {
    FunctionDefImpl functionDef = new FunctionDefImpl();
    return functionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionParam createFunctionParam()
  {
    FunctionParamImpl functionParam = new FunctionParamImpl();
    return functionParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionKey createFunctionKey()
  {
    FunctionKeyImpl functionKey = new FunctionKeyImpl();
    return functionKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionKeyElement createFunctionKeyElement()
  {
    FunctionKeyElementImpl functionKeyElement = new FunctionKeyElementImpl();
    return functionKeyElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionReturn createFunctionReturn()
  {
    FunctionReturnImpl functionReturn = new FunctionReturnImpl();
    return functionReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionReturnElement createFunctionReturnElement()
  {
    FunctionReturnElementImpl functionReturnElement = new FunctionReturnElementImpl();
    return functionReturnElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyDef createPropertyDef()
  {
    PropertyDefImpl propertyDef = new PropertyDefImpl();
    return propertyDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeEqualityDef createKnowledgeEqualityDef()
  {
    KnowledgeEqualityDefImpl knowledgeEqualityDef = new KnowledgeEqualityDefImpl();
    return knowledgeEqualityDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionInversionDef createFunctionInversionDef()
  {
    FunctionInversionDefImpl functionInversionDef = new FunctionInversionDefImpl();
    return functionInversionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeBase createKnowledgeBase()
  {
    KnowledgeBaseImpl knowledgeBase = new KnowledgeBaseImpl();
    return knowledgeBase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Principal createPrincipal()
  {
    PrincipalImpl principal = new PrincipalImpl();
    return principal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Knowledge createKnowledge()
  {
    KnowledgeImpl knowledge = new KnowledgeImpl();
    return knowledge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeDef createKnowledgeDef()
  {
    KnowledgeDefImpl knowledgeDef = new KnowledgeDefImpl();
    return knowledgeDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeDefDestructuring createKnowledgeDefDestructuring()
  {
    KnowledgeDefDestructuringImpl knowledgeDefDestructuring = new KnowledgeDefDestructuringImpl();
    return knowledgeDefDestructuring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeDefSetDestructuring createKnowledgeDefSetDestructuring()
  {
    KnowledgeDefSetDestructuringImpl knowledgeDefSetDestructuring = new KnowledgeDefSetDestructuringImpl();
    return knowledgeDefSetDestructuring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeDefSetDesctructuringAssignment createKnowledgeDefSetDesctructuringAssignment()
  {
    KnowledgeDefSetDesctructuringAssignmentImpl knowledgeDefSetDesctructuringAssignment = new KnowledgeDefSetDesctructuringAssignmentImpl();
    return knowledgeDefSetDesctructuringAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeDefListDestructuring createKnowledgeDefListDestructuring()
  {
    KnowledgeDefListDestructuringImpl knowledgeDefListDestructuring = new KnowledgeDefListDestructuringImpl();
    return knowledgeDefListDestructuring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeDefListDesctructuringAssignment createKnowledgeDefListDesctructuringAssignment()
  {
    KnowledgeDefListDesctructuringAssignmentImpl knowledgeDefListDesctructuringAssignment = new KnowledgeDefListDesctructuringAssignmentImpl();
    return knowledgeDefListDesctructuringAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeValue createKnowledgeValue()
  {
    KnowledgeValueImpl knowledgeValue = new KnowledgeValueImpl();
    return knowledgeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeList createKnowledgeList()
  {
    KnowledgeListImpl knowledgeList = new KnowledgeListImpl();
    return knowledgeList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeRef createKnowledgeRef()
  {
    KnowledgeRefImpl knowledgeRef = new KnowledgeRefImpl();
    return knowledgeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeSet createKnowledgeSet()
  {
    KnowledgeSetImpl knowledgeSet = new KnowledgeSetImpl();
    return knowledgeSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeSpreading createKnowledgeSpreading()
  {
    KnowledgeSpreadingImpl knowledgeSpreading = new KnowledgeSpreadingImpl();
    return knowledgeSpreading;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeGenerator createKnowledgeGenerator()
  {
    KnowledgeGeneratorImpl knowledgeGenerator = new KnowledgeGeneratorImpl();
    return knowledgeGenerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeFromFunction createKnowledgeFromFunction()
  {
    KnowledgeFromFunctionImpl knowledgeFromFunction = new KnowledgeFromFunctionImpl();
    return knowledgeFromFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeFromFunctionArg createKnowledgeFromFunctionArg()
  {
    KnowledgeFromFunctionArgImpl knowledgeFromFunctionArg = new KnowledgeFromFunctionArgImpl();
    return knowledgeFromFunctionArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Communication createCommunication()
  {
    CommunicationImpl communication = new CommunicationImpl();
    return communication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScenarioBranching createScenarioBranching()
  {
    ScenarioBranchingImpl scenarioBranching = new ScenarioBranchingImpl();
    return scenarioBranching;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScenarioOptional createScenarioOptional()
  {
    ScenarioOptionalImpl scenarioOptional = new ScenarioOptionalImpl();
    return scenarioOptional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScenarioAlternatives createScenarioAlternatives()
  {
    ScenarioAlternativesImpl scenarioAlternatives = new ScenarioAlternativesImpl();
    return scenarioAlternatives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scenario createScenario()
  {
    ScenarioImpl scenario = new ScenarioImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Check createCheck()
  {
    CheckImpl check = new CheckImpl();
    return check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KnowledgeCheck createKnowledgeCheck()
  {
    KnowledgeCheckImpl knowledgeCheck = new KnowledgeCheckImpl();
    return knowledgeCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityCheck createEqualityCheck()
  {
    EqualityCheckImpl equalityCheck = new EqualityCheckImpl();
    return equalityCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FreshnessCheck createFreshnessCheck()
  {
    FreshnessCheckImpl freshnessCheck = new FreshnessCheckImpl();
    return freshnessCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LinkabilityCheck createLinkabilityCheck()
  {
    LinkabilityCheckImpl linkabilityCheck = new LinkabilityCheckImpl();
    return linkabilityCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AuthenticationCheck createAuthenticationCheck()
  {
    AuthenticationCheckImpl authenticationCheck = new AuthenticationCheckImpl();
    return authenticationCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KantPackage getKantPackage()
  {
    return (KantPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static KantPackage getPackage()
  {
    return KantPackage.eINSTANCE;
  }

} //KantFactoryImpl
